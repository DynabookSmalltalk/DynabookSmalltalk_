(name 'Compiler-GDK.417' message 'empty log message' id '6949c4f3-8ccf-40f8-93b8-f61db03cabdc' date '24 January 2021' time '6:54:13.258713 pm' author 'GDK' ancestors ((name 'Compiler-eem.416' message 'Fix compiler bug with cascaded caseOf:[otherwise:] nodes. When an optimized block form is used in a cascade the form''s message is sent ensureCanCascade:, whicharranges to send deoptimize to any and all previously optimized blocks in the form.  The bug was that ensureCanCascade: failed to identify the brace node in the optimized caseOf:[otherwise:] form and hence neglected to deoptimize the blocks in the case.  The fix is to provide both an isBraceNode to make it easy for ensureCanCascade: to identify braces, and BraceNode>>deoptimize: to do the work.' id 'dc1deb74-569c-4fab-8b57-c4513cbead96' date '18 January 2020' time '5:39:19.465227 pm' author 'eem' ancestors ((name 'Compiler-ct.415' message 'Fixes a compiler bug that occured when sending a cascade to a block, caused by trouble with copies in Parser >> cascade. Each message of a cascade must be able to access the same instance of the cascadeReceiver in order to perform possible transformations. This bug is also tested in Tests-ct.425. Please revise carefully. Replaces Compiler-ct.414.Furthermore, this commit refines the documentation of #blockExtent and fixes several spelling errors in the class comment of BlockNode (featuring Grammarly).Thanks to Eliot & Nicolas for their support! For more information, see: http://forum.world.st/BUG-Cannot-compile-cascade-sent-to-block-td5108942.html' id '8c7af075-6a3d-c54b-87a8-135580d7ec7c' date '17 January 2020' time '1:51:09.030813 pm' author 'ct' ancestors ((name 'Compiler-mt.413' message 'Merges Compiler-ct.407. We can now programmatically handle syntax errors:[Compiler evaluate: ''3+?'']	on: SyntaxErrorNotification	do: [:ex | ex resume: ''3+4''].' id 'db181638-e223-5648-8bea-f5084f9c44ad' date '21 November 2019' time '4:23:15.551156 pm' author 'mt' ancestors ((name 'Compiler-mt.412' message 'Reformat the sources from my recent changes in the Compiler package in the style of rectangular blocks because it is the default style in that package.Thanks to Eliot for the pointer.' id 'e033a572-485d-41e4-9fcc-5cc55d49a893' date '9 October 2019' time '9:47:40.360433 am' author 'mt' ancestors ((name 'Compiler-eem.411' message 'Implement the postRecompileAction convention for rebuilding state affected by a Compiler recompileAll.Eliminate such a dependency in StdLiterals itsdelf by using a Symbol for performing literalEqual:.  Remove Decompiler initialize from the comment; this method doesn;t do anything affected by VariableNode class>>#initialize anymore.' id 'fb8ba22e-7115-49b7-8a23-52ae58c168cf' date '8 October 2019' time '1:01:29.356552 pm' author 'eem' ancestors ((name 'Compiler-mt.410' message 'Fixes ifNil:ifNotNil: decompilation. Please review.- Only decompile ifNil:ifNotNil: if temps are not closured across nested blocks. This is the same behavior as #to:(by:)do:, which does not restore #to:(by:)do: if the ''var'' or ''limit'' are in an outer (outer?) scope. Only relevant if programmers type the optimized source code themselves.- Note that I created a new method in DecompilerConstructor to pass ''tempReadCounts''. #to:(by:)do: is reconstructed in Decompiler, which already has access to ''tempReadCounts''. See Decompiler >> #jump:if: and #convertToDoLoop:.' id '7ff9d1f8-5f7a-4077-b11b-ede80ada7d13' date '4 September 2019' time '5:03:52.834738 pm' author 'mt' ancestors ((name 'Compiler-TraitTest.409' message 'Fixes #markerOrNilFor: comment (SistaV1) and implementation (V3). returnSelf and returnTop got mixed up.' id 'b13d5a17-2a64-8048-9e67-c70d875eb5e6' date '2 September 2019' time '5:10:57.854301 pm' author 'TraitTest' ancestors ((name 'Compiler-ct.408' message 'Always quote parser error notifications (also in interactive mode)Pretty-print #notify:at: and remove useless (?) asText conversion' id '0db6fa4c-67f3-8b41-bd96-8448b090eb58' date '5 August 2019' time '10:13:08.981062 am' author 'ct' ancestors ((name 'Compiler-mt.407' message 'Prepares syntax highlighting for syntax-error tool: Insert the error message as a comment.' id '5c828155-c416-4d42-8f88-15176ffa33eb' date '4 August 2019' time '10:42:01.663314 am' author 'mt' ancestors ((name 'Compiler-mt.406' message 'Minor performance improvement for has-literal checks. Thanks to Levente for the ideas!Still not sure about putting true/false/nil-checks to the top. Also not sure the complex return blocks for symbol/character/integer.' id '6d65ea45-4488-471b-a9cf-b4a16cac35f3' date '24 July 2019' time '5:10:22.611145 pm' author 'mt' ancestors ((name 'Compiler-mt.405' message 'Adds message to avoid costly byte-code scanning for has-literal checks.Note that ((... or: [...]) or: [...] ...) is a little bit faster to evaluate to false than (... or: [ ... or: [ ... ] ] ). I would suspect not but deeply nested blocks seem to have an interesting effect here.' id '7354b36e-2509-4f23-b110-1b9cfe0310d2' date '24 July 2019' time '11:17:04.167109 am' author 'mt' ancestors ((name 'Compiler-mt.404' message '(Extracted from Compiler-BD.408)Replace the code duplication from xLetter which was the same as the step method.This is done in order to allow customization of the step method without having to modify both places. All other methods already use the explicit step method."open code step for speed" no longer applies anyways as a method call is fast enough nowadays.' id 'a82bc364-41dc-4671-94b7-7b4b669f3bd4' date '22 July 2019' time '8:40:19.7179 am' author 'mt' ancestors ((name 'Compiler-eem.403' message 'Fixed yhree typos in a comment, and improved the class comments for ParseNodeEnumerator & subclass.' id 'a0f07dce-0a58-422e-af37-32d5a3bd6546' date '19 March 2019' time '11:58:47.238202 am' author 'eem' ancestors ((name 'Compiler-eem.402' message 'Merge with Compiler-ul.401, eliminate undeclatred variable in ParseNodeWithPrecedingStatementEnumerator.' id '886de89c-a3ed-4fb5-a8ed-7f9bf78d69b6' date '19 March 2019' time '11:44:20.570473 am' author 'eem' ancestors ((name 'Compiler-eem.401' message 'Fix a slip in EncoderForSistaV1 class>>isTempStoreAt:in:, and fix a couple of typos nearby.' id '7920c007-0974-48a7-b1b3-b4de923b90d4' date '19 March 2019' time '9:28:16.827407 am' author 'eem' ancestors ((name 'Compiler-eem.400' message 'Fix some typos in the V3 bytecode set description' id '0454c383-0390-4733-ad3e-ed056ace7715' date '18 January 2019' time '1:14:15.703384 pm' author 'eem' ancestors ((name 'Compiler-eem.399' message 'repeat loops are optimized loops, and so temps declatred within them need to be nilled omn each iteration.  Hence isOptimizedLoop needs to identify them.Fix speeling rorre and excess formatting in argumentsInEvaluationOrder' id '7441a2db-94e0-47f0-9b2c-2c8d7b04798e' date '4 January 2019' time '4:03:37.905572 pm' author 'eem' ancestors ((name 'Compiler-eem.398' message 'Fix a spelling error' id '641c8172-6e85-49c8-aa42-0e2cd184e05a' date '3 January 2019' time '3:47:34.750814 pm' author 'eem' ancestors ((name 'Compiler-eem.397' message 'Fix the recorded pcs for inlined blocks.  The old code assumed one-byte branches and so generated off-by-one pcs for all multiple byte branches.  In addition the code for case guards was simply wrong, always off-by-one.The fix is to use emncoder nextPC in teh right place, not encoder pc after branch/send generation when a multibyte send will compute the wrong pc.  Tests exist in Tests-eem.405 and later.  Play via debugging e.g.:5	caseOf: {	[4] -> [#nope].	[3] -> [#nope].	[2] -> [#nope].	[1] -> [#nope].	[0] -> [#nope] }	otherwise: [#dope]' id '0561e11a-8d91-4ed1-b806-535264b98ef8' date '3 January 2019' time '3:15:09.938414 pm' author 'eem' ancestors ((name 'Compiler-eem.396' message 'Fix a slip in Sista block creation' id '4b9317db-2d11-4ae6-a183-9ec139110eb1' date '20 November 2018' time '1:34:47.963843 pm' author 'eem' ancestors ((name 'Compiler-eem.395' message 'Implement markerOrNil: for the SistaV1 bytecode set and firm up both implementations so that e.g.	aMethod		self fooClass newis not interpreted as a marker method (because #new is a special selector and hence does not cayse a literal to be allocated).' id '2f7c8f3a-4e2d-413b-8651-b05b5683f89d' date '15 October 2018' time '12:37:16.203042 pm' author 'eem' ancestors ((name 'Compiler-eem.394' message 'Fix a bug in Scanner>>xUnderscore that prevented parsing e.g.method: p _: q _: r	^''cool''' id '446b4a31-2799-41fa-82d4-e503a94fb360' date '18 September 2018' time '11:01:49.239937 am' author 'eem' ancestors ((name 'Compiler-bf.393' message 'Fix pc highlighting for ifNil:ifNotNil:.' id '860565e2-2f2c-49bb-9e2f-e0d69d7b46c5' date '23 August 2018' time '7:44:43.576279 pm' author 'bf' ancestors ((name 'Compiler-bf.392' message 'Mark macro senders for browsing' id '039d1b50-5fe6-4c03-b82f-8015a2bac469' date '23 August 2018' time '6:06:38.314464 pm' author 'bf' ancestors ((name 'Compiler-eem.391' message 'Fix pc highlighting for ifNil:[ifNotNil:] et al, as in {char ifNil: [ Error signal ]} in| str char |str := ''1234'' readStream.char := str next.char ifNil: [ Error signal ].char caseOf: {    [$4] -> [''four''].    [$3] -> [''three'' asUppercase].    [$2] -> [''two''].    [$1] -> [''one'' asUppercase].} otherwise: [ ''No'' ].' id '95e267a4-cfe8-4aa4-8e83-876603470983' date '21 August 2018' time '3:37:49.438481 pm' author 'eem' ancestors ((name 'Compiler-bf.390' message 'Fix source range for caseOf: debugging' id 'd76ef6ae-8303-476d-bb1e-640b2476c276' date '19 August 2018' time '11:24:12.350952 pm' author 'bf' ancestors ((name 'Compiler-eem.389' message 'Fix a regression in decompilation introduced by Kernel-eem.1174 adding information to pragma>>printOn:.' id '44f545d6-d04a-4c28-9559-12ce4a9e39da' date '26 July 2018' time '9:45:02.726136 pm' author 'eem' ancestors ((name 'Compiler-eem.388' message 'Initialize the temp for ThisContext (the argument to DoItIn: in the context inspector in the debugger) correctly, avoiding a spurious undefined warning and consequent reselection.Fix typedScan:do: sio that character literals are scanned (and hence that e.g. local senders of... $A et al work properly).' id '656179c4-4227-43e5-91f5-b10d57129aba' date '30 June 2018' time '9:39:44.257778 am' author 'eem' ancestors ((name 'Compiler-eem.387' message 'Fix the decompiler for the full lock regime.  There isn''t much in the decompiler that directly refers to the method inst var (most accesses use self method, which answers the sender inst var of InstructionStream).  But case statements is one of them (specifically myExits := myExits reject: [ :e | e isNil or: [ e < 0 or: [ e > method endPC ] ] ]).  The bug was that doClosureCopy:copiedValues: was only setting up sender but not method and so case statements were mishandled within full blocks (e.g. in LanguageEditor>>asHtml:) becausde the wrong endPC was being used.' id '2a8c2667-3328-4cd4-a7c9-c98e04d6ddf2' date '16 June 2018' time '6:15:08.755516 pm' author 'eem' ancestors ((name 'Compiler-eem.386' message 'Fix a number of failing decompilation tests due to the last statement of a block being known to answer nil by the compiler side.  The root cause was my test in BlockNode>>printStatementsOn:indent: that assumed that blocks with arguments never answered nil.' id 'b7853f0c-81c4-46cf-bc35-b572d22887b7' date '16 June 2018' time '5:46:30.6679 pm' author 'eem' ancestors ((name 'Compiler-eem.385' message 'The scanner for spotting closure creation bytecodes in methods must identify full block closure creations.' id '07c5fc8e-5463-4db6-912a-fdc0125ce7df' date '16 June 2018' time '4:29:33.44317 pm' author 'eem' ancestors ((name 'Compiler-eem.384' message 'Oops!  We need that support method.' id '79e07928-38ba-489e-a330-42bca61aac02' date '16 June 2018' time '3:23:37.766854 pm' author 'eem' ancestors ((name 'Compiler-eem.383' message 'Fix decompilation in the full block regime.  Whem mapping from block starts to ranges, temp names, etc, the keys are Compiledblock instance4s, not simple integer pcs, and so IdentityDictioanries must be used so as not to confuse two blocks that have the same literals and bytecodes.' id 'f72d6072-25d5-4064-8c6a-03cb9752c910' date '16 June 2018' time '3:20:33.200059 pm' author 'eem' ancestors ((name 'Compiler-eem.382' message 'Oops!  Deal with potential recursion in xLitQuoteForTokenization.' id '52aa994c-63da-4485-aade-2f4b72f18e06' date '31 May 2018' time '5:02:26.967309 pm' author 'eem' ancestors ((name 'Compiler-eem.381' message 'Fix typedScanTokens: for underscore-prefixed symbols such as #_WIN32.' id '6612bdf4-e29a-4cc5-a550-139de9e3c42d' date '31 May 2018' time '4:59:26.014435 pm' author 'eem' ancestors ((name 'Compiler-eem.380' message 'Rename Encoder''s addedSelectorAndMethodClassLiterals, a name which is now misleading given the new full block support, to addedExtraLiterals.  Requires Compiler-eem.379.' id '3133d60f-54b2-410e-92ae-ef5cc782ab9c' date '20 March 2018' time '3:30:10.256928 pm' author 'eem' ancestors ((name 'Compiler-eem.379' message 'Add initialization of the Undeclared variable addedExtraLiterals which is soon to be a replacement for Encoder''s addedSelectorAndMethodClassLiterals, a name which is now misleading given the new full block support.  By adding the initialization of the Undeclared variable the compiler is not broken as the instance variable is renamed and Encoder''s methods are recompiled.' id 'b3856f24-9d98-478a-936f-c6d24d667be4' date '20 March 2018' time '3:27:27.12646 pm' author 'eem' ancestors ((name 'Compiler-eem.378' message 'Provide a full block extractor, e.g. to support InstructionStream>>blockMethodOrNil a la selectorToSendOrSelf.Fix a typo.' id '9e96b6bb-8a69-4250-9b67-e61ce104cadc' date '14 March 2018' time '7:13:03.579626 pm' author 'eem' ancestors ((name 'Compiler-eem.377' message 'Fix compiler bug with full blocks.  Old code added an extra literal nil.' id 'e69687e2-f183-40f0-abed-f080749ea44e' date '14 March 2018' time '3:38:12.426121 pm' author 'eem' ancestors ((name 'Compiler-eem.376' message 'Fix some bugs in the new machinery thown up by tests for false positives.' id '5a1a43dc-5467-4e83-86f3-d6ba1cba0765' date '14 March 2018' time '1:07:25.770492 pm' author 'eem' ancestors ((name 'Compiler-eem.375' message 'Provide a comprehensive literal-in-bytecode scanning scheme that works for SistaV1''s Integer and Character encodings, not just the special selectors and the special pushes.' id 'ac95b0ba-0013-4121-8cf5-70e85161add0' date '13 March 2018' time '4:26:34.000538 pm' author 'eem' ancestors ((name 'Compiler-eem.374' message 'Make reindexingLiteralsDo: more robust when literals get added during blocks and are used in an outer scope after use in a block.  c.f. Compiler-eem.369' id '346de92b-2782-45ad-b91b-fc790654a88f' date '9 March 2018' time '5:26:54.927757 pm' author 'eem' ancestors ((name 'Compiler-eem.373' message 'Decompiler support for full blocks.Also fix bug in doClosureCopy:copiedValues: so as to create a block node with the expected pc association.' id '47f067a5-1d56-4b81-824c-e48560584230' date '12 January 2018' time '3:37:48.690536 pm' author 'eem' ancestors ((name 'Compiler-eem.372' message 'Move BlockLocalTempCounter to Kernel.  It is used to implement BlockClosure>>numTemps, which is used more broadly than simply the decompiler and debugger.' id '692e5c85-e068-42df-9404-266f9bd3c93f' date '11 January 2018' time '9:30:54.229387 am' author 'eem' ancestors ((name 'Compiler-eem.371' message 'Implement source mapping for full blocks; to this end:Have the pc in a node belonging to a full block be an association from the block method to the pc within it.  Add a blockMethod inst var to BytecodeEncoder to hold the currently generated block method and have nodes access their pc via BytecodeEncoder>>pc & nextPC.Introduce startKeys instead of startPcs, to generalize to full blocks and embedded blocks.Refactor full block method generation a little to avoid unnecessary non-self sends.Have LiteralNode print a block, not storeString it, for readability.' id '36ba34e7-1d85-4f34-8f83-9f161918c3b2' date '11 January 2018' time '9:04:32.236416 am' author 'eem' ancestors ((name 'Compiler-eem.370' message 'Move CompiledMethod>>startpcsToBlockExtents and its support machinery to Compiler; it is used both by the Decompiler and the Debugger and so belongs in Compiler, not in Tools.' id '277f856e-2abf-452c-a5e0-84d00819a04d' date '11 January 2018' time '8:41:19.10862 am' author 'eem' ancestors ((name 'Compiler-eem.369' message 'reindexingLiteralsDo: acually needs to reset the lliteral nodes, not merely reset them, doh!Fix a bad slip in the code to size a full block.  Juyst because it ends with a returnNilToCaller doesn;t mean we shouldn''t generate the other nodes in the block, doh!' id 'a342cbfd-89fd-435f-af5b-7ad501af8aeb' date '6 January 2018' time '1:28:37.915349 pm' author 'eem' ancestors ((name 'Compiler-eem.368' message 'Better separate SelectorNode and SpecialSelectorNode to avoid SopecialSelectorNode deferring to SelectorNode on super sends.  Hence reduce use of the obsolete code variable, makimng SelectorNode>>reserve: more straight-forward and unused in SpecialSelectorNode.' id '3055d203-f94c-47ba-8ea0-69c82d736955' date '6 January 2018' time '1:00:10.304648 pm' author 'eem' ancestors ((name 'Compiler-eem.367' message 'Uh, no.  reindexingLiteralsDo: does have to deal with the selectorSet specially.' id '27d11be7-248b-4525-958e-20cfc05779b3' date '5 January 2018' time '9:27:53.33704 pm' author 'eem' ancestors ((name 'Compiler-eem.366' message 'reindexingLiteralsDo: doesn''t need to key by the same keys used in the literal sets; they can simply use the nodes themselves.  This fixes the ambiguity between symbols used as selectors and symbols used as literal symbols, and fixes the missing literal problem addressed by Compiler-eem.365.' id 'd8b9de6b-6688-4293-b66e-e5e1ec50e4fb' date '5 January 2018' time '9:08:19.867232 pm' author 'eem' ancestors ((name 'Compiler-eem.365' message 'Make reindexingLiteralsDo: more robust when literals get added during blocks and hence weren''t saved before the block was generated.' id 'e3702a86-124d-46ca-bd7d-0707ab249ab4' date '5 January 2018' time '8:21:15.192014 pm' author 'eem' ancestors ((name 'Compiler-eem.364' message 'Fix reindexingLiteralsDo: to also reset the nodes in the selectorSet.  And simplify.' id '745c56d9-c3bf-4d7a-89bd-f5751947949e' date '5 January 2018' time '7:03:50.183797 pm' author 'eem' ancestors ((name 'Compiler-eem.363' message 'Use the blockReturnNilToCaller bytecode in full blocks.  Add a postscript to remove empty categories in ParseNode and subclasses (to get rid of the obsolte and empty code generation (closures) protocols).' id 'e6e0f44c-156f-4ba2-a96b-044cc09da7e2' date '5 January 2018' time '12:23:47.49447 pm' author 'eem' ancestors ((name 'Compiler-eem.362' message 'Implement super sends in full blocks.  Since CompiledBlock uses the last literal to refer to the outer CompiledCode, it can''t hold the class association used in conventional super sends.  Hence within a block a super send must use the directed super send form.' id '6024b2f1-3e38-4625-a934-dd3f7cb29484' date '5 January 2018' time '10:30:42.489732 am' author 'eem' ancestors ((name 'Compiler-eem.361' message 'First cut of FullBlockClosure support in the compiler.  If the encoder answers true to supportsFullBlocks then non-optimized blocks are compiled to their own CompiledBlock instance.Reduce the use of code in a few ParseNode subclasses.  Use the more generic isSpecialLiteralForPush:  [todo: use SistaV1''s BlockReturn nil].[And for the curious here''s a way to exercise the compiler(self systemNavigation allMethodsSelect: [:m| m scanFor: 143]) do:	[:mr|	(Parser new	encoderClass: EncoderForSistaV1;		parse: mr sourceString		class: mr actualClass) generate]' id '5fe8c44c-f098-43cc-b689-1bf367f5ed8e' date '2 January 2018' time '5:47:32.911397 pm' author 'eem' ancestors ((name 'Compiler-eem.360' message 'Fix the Decompiler to remove the nil node that it mistakenly generates following a returning if with a nil else.  As a side-effect provide ParseNode>>nodesWithPreceedingStatementsDo:.Recategorize the BlockNode>>statements accessors.Fix a typo.  Remove a trio of methods that are now in EToys.' id '28fc60ef-5fe3-4e38-a15c-e266f8aa3f72' date '24 December 2017' time '11:17:18.883597 am' author 'eem' ancestors ((name 'Compiler-mt.359' message 'Fix spacing. Still needs a better implementation, I guess.' id '322cf1dd-62e8-aa47-8cb2-3dc89c780138' date '10 November 2017' time '3:29:46.851435 pm' author 'mt' ancestors ((name 'Compiler-mt.358' message 'Adds a way to pretty-print code snippets.' id '0e253457-6396-ae48-aad7-b819986854cb' date '10 November 2017' time '3:24:38.351435 pm' author 'mt' ancestors ((name 'Compiler-eem.357' message 'Fix the Compiler''s evaluate:in: methods for non-cil contexts (e.g. the ContextVariablesInspector bottom right pane in the debugger).  The old code used aContext methodClass which would exclude the variables of a receiver whose class inherited the method, rather than implemented it directly (e.g. debug (1@2) printString and in the context inspector on the Point(Object)>>printString activation try and evaluate x@y.  Using methodClass excludes Point''s inst vars.' id '3965b31d-87f6-47e3-b23e-57dd1dd273b9' date '12 July 2017' time '5:14:16.035903 pm' author 'eem' ancestors ((name 'Compiler-eem.356' message 'Fix a comment speeling rorre.  Harvested from Terf.' id 'fa9619c3-9b45-4657-a9ff-4ad7fa610149' date '25 May 2017' time '3:32:16.048882 pm' author 'eem' ancestors ((name 'Compiler-nice.355' message 'MergeCompiler-eem.354:	Provide a proper comment for BlockNode and eliminate an unused variable and an unused method; this in prelude to implementing full blocks.Eliminate obsolete binding machinery (literalScannedAs:notifying:).  The current compiler deals with Undeclared in a more direct way earlier in compilation.Nuke the unnecessary identical override of generateMethodOfClass:trailer:from: in EncoderForSistaV1. Correct a spelling error.Compiler-nice.354:	Don''t decompile obsolete compiled forms for braces {} (braceWith: & friends) nor blocks [] (closureCopy:copiedValues:)' id '3678dcdc-13c7-467e-a8f1-878f8fbabd80' date '5 May 2017' time '10:21:50.023997 pm' author 'nice' ancestors ((name 'Compiler-eem.341' message 'Add the refactored encoder-specific method generator.  This one moves generation from MethodNode to BytecodeEncoder and subclasses, and hence allows easier bytecode set selection, or at least far more sends to self than to encoder.' id 'a66d7b39-0d0f-4d67-8e82-02964c101b10' date '3 April 2017' time '5:25:34.125602 pm' author 'eem' ancestors ((name 'Compiler-eem.340' message 'Use the encoder-specifc limit for maxNumLiterals.' id '76902ca3-f64d-427a-af3d-466a103a3ce3' date '3 April 2017' time '5:00:32.319924 pm' author 'eem' ancestors ((name 'Compiler-eem.339' message 'Have the Parser obey the bytecode set preference in CompiledCode preferredBytecodeSetEncoderClass.  Fix a restriction in BytecodeEncoder>>computeMethodHeaderForNumArgs:numTemps:numLits:primitive: that caused EToys to have to implement an unnecessary override.Fix the literal limit in that same method.  The max number of literals is 32767 now that we reserve bit 15 for the "do not jit-compile with counters'' bit in Sista VMs.' id 'fc3a8d3e-45e0-4d89-adde-ae01ce361263' date '3 April 2017' time '4:41:32.232382 pm' author 'eem' ancestors ((name 'Compiler-eem.338' message 'Use the newly regularized literal printing in Collections-eem.744 and Kernel-eem.1082 to ensure that literal characters and arrays are printed as such when pretty-rpinting and/or decompiling.' id '8d9fa12c-80e0-4ba8-8101-8ead7d8425eb' date '3 April 2017' time '4:08:55.888174 pm' author 'eem' ancestors ((name 'Compiler-eem.337' message 'Eliminate the support for blue book block decompilastion and collapse DecompilerConstructorForClosures into DecompilerConstructor.Refactor MethodNode>>preen to also check for temps declared in blocks that conflict with method-level temps.  On decompilation this is a sign that the method level temps were delcraed in sme optimized block and the preen pass finds out where to push the method level temps down to.' id '85f04687-1157-4f7a-9a4c-c02c733b638e' date '3 April 2017' time '2:06:32.26662 pm' author 'eem' ancestors ((name 'Compiler-eem.336' message 'Replace mention of MethodContext with Context in class comments as appropriate.' id 'bcc6a515-1159-462a-9ab9-89faeeadfadc' date '30 March 2017' time '6:03:14.217388 pm' author 'eem' ancestors ((name 'Compiler-eem.335' message 'Fix the regression properly.' id 'c564b5dc-1858-413a-8138-7d322cfad902' date '30 March 2017' time '4:45:15.534619 pm' author 'eem' ancestors ((name 'Compiler-eem.334' message 'Oops.  Fix the regression due to over zealous removal of obsolete closure copde.  It helps to keep the code still in use <gulp>.' id '8bbbbea5-2e6c-4f7a-bf75-1d81c534cc5d' date '30 March 2017' time '4:39:24.385576 pm' author 'eem' ancestors ((name 'Compiler-eem.333' message 'Nuke obsolete bytecodeless closure implementation support.Nuke not trearting special selector 200 aas a real send (was #blockCopy: now #~~).' id '89658511-31df-4a48-8b8f-ea3a070871fd' date '30 March 2017' time '4:06:49.311904 pm' author 'eem' ancestors ((name 'Compiler-ul.332' message 'SortedCollection Whack-a-mole' id '7bcb6664-de39-420a-97ab-8968cd28927e' date '13 March 2017' time '4:02:25.191527 am' author 'ul' ancestors ((name 'Compiler-dtl.331' message 'Merge' id 'ee28d7a0-4167-4462-8780-b9fa72d4b0db' date '5 March 2017' time '11:23:25.780766 am' author 'dtl' ancestors ((name 'Compiler-ul.330' message '- fixed the first catch of the new #& and #| type checks' id '8312df2d-c576-43eb-b847-bfcc53fb4c82' date '27 February 2017' time '2:43:16.813851 am' author 'ul' ancestors ((name 'Compiler-ul.329' message '- omit ifAbsent from #index* sends when it would use the default value, 0' id 'df499238-217a-4e1c-a710-77577e4df261' date '27 February 2017' time '2:04:49.47425 am' author 'ul' ancestors ((name 'Compiler-nice.328' message 'Remove obsolete code-generation methods' id '165e1dcd-51cd-4ce9-8806-92457585a3d1' date '30 October 2016' time '10:48:17.206969 pm' author 'nice' ancestors ((name 'Compiler-tfel.327' message '- allow using the Encoder without a requestor (useful when feeding it directly without parser/compiler and for testing)- be more robust in MethodNode printing, when the selector node ivar is subclass of SelectorNode (e.g. a SpecialSelectorNode), the code would try to print the special selector as key of an ordinary SelectorNode.' id '66cfc18a-cb83-3e43-b05a-69c1b7a13f9a' date '11 August 2016' time '11:09:24.072482 am' author 'tfel' ancestors ((name 'Compiler-tfel.326' message 'fix printing of MessageNodes and SelectorNodes' id 'e3f5a2b4-0efb-8a4a-a062-bf5469c9b73d' date '4 August 2016' time '11:01:03.69403 am' author 'tfel' ancestors ((name 'Compiler-tfel.325' message 'merge squeakland Etoys image' id 'ce80c39a-9bc9-914c-9f10-dd1d5ed2cd70' date '2 August 2016' time '11:31:47.767786 am' author 'tfel' ancestors ((name 'Compiler-mt.324' message '*** Widget Refactorings and UI Themes (Part 5 of 11) ***Some fixes and refactorings for dialogs including added support for UI theming.' id 'f8b4e0ae-171c-8541-ae32-656183633ad6' date '31 July 2016' time '11:10:04.90449 am' author 'mt' ancestors ((name 'Compiler-eem.323' message 'Comment bytecode 139 as the callPrimitive bytecode (Spur mandates this to lift the number of literals).' id '52466c66-954e-47f9-8c43-2ce094580ab4' date '7 July 2016' time '11:27:28.886558 am' author 'eem' ancestors ((name 'Compiler-eem.322' message 'Add bytecode scanning machinery to identify "synthetic" stores, i.e. the stores of indirect temp vectors at the start of methods containing closures.Add a "high-quality" pcPreviousTo:in:for: that answers nil for the first pcs of blocks, and answers the block creation bytecode''s pc for the pc following an embedded block, and use it to disambiguate bytecode sequences that look like pushNewArray of an empty array..Add isTempStoreAt:in: & pcFollowingBlockAt:in: to support the above.' id 'b7bb5d79-1a2e-4a45-a6cc-dd0a8cf438bb' date '13 May 2016' time '12:36:54.992126 pm' author 'eem' ancestors ((name 'Compiler-nice.321' message 'Be pedantic: refuse to compile until the user eliminate dead code following a returning if (case when both branches return).Do this only when interactive, we don''t like when Compiler refuses to load legacy code.' id 'fd182984-c3ab-4477-bbff-44d9b1744ee3' date '3 May 2016' time '9:02:56.110078 am' author 'nice' ancestors ((name 'Compiler-nice.320' message 'Minor change: avoid generating a pop after the inlined if when both branches return.While at it, avoid invoking super with a different selector.Note: statements following two returning branches are unreachable. Since we avoid the jump over else branch when then branch returns, the Decompiler sees a single then branch and is fooled by the return appearing in middle of statements. We could restore this jump over else when else branch also returns, but we should better generate a Compiler warning and eliminate dead code generation.' id '2c61a7e6-7ce4-4ae9-ab01-21381e4a2e43' date '3 May 2016' time '8:26:42.945884 am' author 'nice' ancestors ((name 'Compiler-mt.319' message 'Even if the requestor does not support interactive error correction, allow for the use of new bindings.' id '346cab39-3c65-40cb-9344-293aa4090074' date '18 February 2016' time '10:58:07.931715 am' author 'mt' ancestors ((name 'Compiler-mt.318' message 'Allow models to get notified about parser or compiler errors while not supporting the interactive error correction protocol.' id '057a9bc7-ed1d-4461-9500-4da920216cfe' date '17 February 2016' time '6:03:57.27483 pm' author 'mt' ancestors ((name 'Compiler-eem.317' message 'Small improvement to compiler performance.  There is no need to scan for an assignment to the limit in a to:[by:]do: when the to: argument is known to be an argument, because arguments are not written to.' id '956bcba6-bf0a-463c-aaef-90903732fb85' date '21 November 2015' time '3:20:26.817 pm' author 'eem' ancestors ((name 'Compiler-nice.316' message 'Make markerOrNil 64bits spur compatible by not hardcoding wordSize.' id '7a0893b3-8e86-4fa0-9d0c-5e80104c8278' date '31 October 2015' time '6:24:53.362 pm' author 'nice' ancestors ((name 'Compiler-cmm.315' message 'Resave change from Tobias with cleaned-up ancestry..' id '381c9206-c555-4633-a1ec-499bb3bd747a' date '8 October 2015' time '10:16:18.018 am' author 'cmm' ancestors ((name 'Compiler-eem.309' message 'Fix the compiler to collapse optimized block temps of the same name to the same temp location for a better debugging UX.' id '89f65602-802e-41c5-b52c-c85cf61e299f' date '16 September 2015' time '5:26:18.544 pm' author 'eem' ancestors ((name 'Compiler-eem.308' message 'Addition:Scanner>>typedScan:do:, useful for tools (watch this space).Optimisation:Avoid an expensive visit of the parse tree if there are no temps when checking if they need nilling before being read.Polish:Better error message with bindTemp:.Decompile empty blocks as [] not [nil].Nuke obsolete method creation methods generateMethodOfClass:trailer:from:.' id '0420593e-81fc-463c-8d0d-5a0cc7de2845' date '16 September 2015' time '11:42:08.344 am' author 'eem' ancestors ((name 'Compiler-eem.307' message 'Make the literal limit in the compiler a funciton of both the bytecode set and CompiledMethod''s implementation limit.' id '01d3dbd8-8e6e-49b4-9a85-abdfdb847729' date '25 August 2015' time '4:08:43.685 pm' author 'eem' ancestors ((name 'Compiler-ul.306' message '#includesSubString: -> #includesSubstring:' id 'd876b73a-547e-4172-b11b-0a878aed4d3d' date '14 August 2015' time '7:00:29.616 pm' author 'ul' ancestors ((name 'Compiler-cmm.305' message 'Squeak 5.0 release, Spur bootstrap changes to transition to Spur object model and core system.' id '732f4143-cf38-4b59-9fac-d1445778b213' date '19 July 2015' time '1:17:46.629 pm' author 'cmm' ancestors ((name 'Compiler-eem.304' message 'Fix stack depth regression from Compiler-eem.300; this time with the correct version number for the MC package.' id '3b07ef9d-69d2-424d-845c-affde45643b8' date '8 July 2015' time '5:15:09.812 pm' author 'eem' ancestors ((name 'Compiler-topa.302' message 'Don''t be too strict if BlockNode scope setting is idempotent' id '503dc5a6-5953-49d7-ba6b-5ca0d7de4e3c' date '6 July 2015' time '5:23:17.205 pm' author 'topa' ancestors ((name 'Compiler-eem.301' message 'Fix pc range highlighting when at the #+ in theincrement at the end of an optimized to:[by:]do:loop.' id '2e7f25b0-33b9-4efc-b492-27a58ff8d78f' date '19 June 2015' time '10:01:55.282 am' author 'eem' ancestors ((name 'Compiler-eem.300' message 'Use the size/emitPushNClosureTemps: api inblock generation.' id '538f90f4-71d3-4f00-ac34-348700471a82' date '29 May 2015' time '3:31:40.184 pm' author 'eem' ancestors ((name 'Compiler-eem.299' message 'Provide support for a specialized pushNClosureTemps:bytecode, as included in the Sista bytecode set.' id '04451481-d898-4b03-bc51-9e28546cfb82' date '29 May 2015' time '3:25:41.119 pm' author 'eem' ancestors ((name 'Compiler-eem.298' message 'Provide multiple-bytecode-sets aware support for markerOrNil' id 'b06cc000-4a40-45cd-a0b2-a2d1c0309e39' date '29 May 2015' time '11:59:13.77 am' author 'eem' ancestors ((name 'Compiler-cmm.297' message 'DoIt evaluation in the debugger needs to be from the selected Context''s methodClass, not the receiver''s class so that "super" will refer to the correct class.' id '1d7e980a-3504-44fa-9a9c-803bf3a6bda2' date '23 March 2015' time '7:54:50.696 pm' author 'cmm' ancestors ((name 'Compiler-topa.296' message 'initially, the encoder is self, but does not know about the classEncoding. Guard this, too' id '79db1261-d436-4832-b794-ab25d7521fd5' date '15 March 2015' time '11:25:01.745 pm' author 'topa' ancestors ((name 'Compiler-topa.295' message 'Fix underscore message names when the #parseSelector: api of Parser is used and, hence, no encoder is available.' id 'f2727a06-5024-4534-bf38-934bcdad9bf9' date '13 March 2015' time '1:34:26.208 am' author 'topa' ancestors ((name 'Compiler-bf.294' message 'Accidentally changed method category.' id '729e0ce5-c7f6-4758-a553-22ba8004be57' date '19 February 2015' time '6:40:12.921 pm' author 'bf' ancestors ((name 'Compiler-bf.293' message 'Fix deoptimization of ifNil: etc.' id '737af1fb-e8f0-4653-851b-0c1b3ed0f65f' date '19 February 2015' time '6:22:49.349 pm' author 'bf' ancestors ((name 'Compiler-topa.292' message 'Fix super-send DoIts in the debugger.' id '96d2c928-fd32-4327-b74a-55e09df39549' date '24 January 2015' time '3:21:01.295 pm' author 'topa' ancestors ((name 'Compiler-eem.291' message 'More relevant and neater primitive methoddecompilation with VMMaker loaded.' id '20aefd33-c4e7-45b2-88b7-e6e29b5988b9' date '19 December 2014' time '10:15:04.766 am' author 'eem' ancestors ((name 'Compiler-eem.290' message 'Define the other extension acessor, the one thatlocates extensions before an extended bytecode.Tighten up the comment on the one that accessesthe extension bytecodes themselves.' id 'a2799479-1a99-45c4-b17c-4160d19b04e3' date '8 October 2014' time '1:53:43.085 pm' author 'eem' ancestors ((name 'Compiler-eem.289' message 'Fix doits in the codePane of a debugger opened fromanother debugger.  e.g. before this fix1. debug 3+4.2. in code pane of debugger #1 debug 4+53. in code pane of debugger #2 debug 5+6, boom.The bug was that when the encoder creates temp names for temp vars in the debugged context, whichit does by creating messages to DoItIn:''s argument''ThisContext'', if this is a level 3 debug, then theoriginal expression would have a temp var called''ThisContext'' already and that would overwrite the''ThisContext'' argument for this level with amessage send, and boom.The fix is merely to filter-out these temps andhence never overwrite DoItIn:''s ''ThisContext''argument in the scope table.' id '7d67c48c-4a2f-4445-83e8-1f8f931801e3' date '6 October 2014' time '11:58:50.62 am' author 'eem' ancestors ((name 'Compiler-eem.288' message 'Provide support for fixing ContextPart>>#quickSend:to:with:super:' id '79749887-066e-4675-9b9a-c39cae7f4ad4' date '2 September 2014' time '2:22:13.42 pm' author 'eem' ancestors ((name 'Compiler-eem.287' message 'Quick methods may need schematic temps too...' id '3d4cff37-addb-4d6e-9a1f-d54e365d4e6c' date '10 August 2014' time '1:00:51.952 pm' author 'eem' ancestors ((name 'Compiler-eem.286' message 'Provide the selector scanning support InstructionStreamneeds to make selectorToSendOrSelf multiple bytecode setcapable.Provide the method generators so that methods can begenerated with the two different header formats.Provide a class comment for SpecialSelectorNode.' id '34f9ea24-6e5a-4bb3-9e9f-0f59fb8c93cf' date '5 August 2014' time '9:44:57.105 pm' author 'eem' ancestors ((name 'Compiler-eem.285' message 'Lots more support for multiple bytecode sets.Abstract out of InstructionStream:	size of closure creation bytecode	scanning for inst var reads and writesProvide support for bytecode set specific	callPrimitiveBytecode	unusedBytecodeProvide support for different special literal and specialselector encodings.Ensure bytecode sizing of backward branches usenegative distances.Other:Make the MessageNode transformations check for therelevant block argument count.' id '99d40074-99f4-4e36-875e-e3f1cd61acfa' date '5 August 2014' time '7:52:00.572 pm' author 'eem' ancestors ((name 'Compiler-eem.284' message 'Fix parseSelector: for allowUnderscoreSelectors regime.' id '2a34ef9b-610f-48c7-b117-14cc50941311' date '26 June 2014' time '12:39:57.941 pm' author 'eem' ancestors ((name 'Compiler-eem.283' message 'Remove some of the class variables of ParseNode thatare related to teh SqueakV3 bytecode set that are nolonger needed.' id 'b275818f-33a6-461d-ab33-3d234e62f7ca' date '19 May 2014' time '12:12:07.81 pm' author 'eem' ancestors ((name 'Compiler-eem.282' message 'Flesh out (complete?) the support for testing/scanning inInstructionStream and CompiledMethod for multiplebytecode sets.' id 'caa1adc9-fcd0-47d2-bf81-6e6330e0d7c7' date '19 May 2014' time '9:04:01.39 am' author 'eem' ancestors ((name 'Compiler-eem.281' message 'Implement (more coherently than the alternateInterpret...scheme) multiple bytecode set interpretation support inBytecodeEncoder class and subclasses.  This support isfor a soon-to-be-published version of Kernel, whoseInstructionStream depends on this.Nuke the now obsolete "long form" encoder class hacks.' id '6bcb563c-2c68-4290-b63e-9a8cfc1eb1e9' date '14 May 2014' time '12:07:35.957 pm' author 'eem' ancestors ((name 'Compiler-eem.280' message 'Get rid of the old	([:a :b|] value: #first value: #last) == #lastanachronism.  Now all empty blocks answer nil.' id 'f8e06e2d-2a56-40e8-9783-6b17b6ca0e2e' date '12 May 2014' time '11:29:30.127 am' author 'eem' ancestors ((name 'Compiler-nice.279' message 'Provide a complete protocol for invoking Compiler without logging - that is without logged: parameter.Make the logging (logged:) version send the non logging version rather than the contrary.This step may help moving logging out of Compiler in a future version.' id '94b1b5f8-f71b-4425-b035-461d3dc94e3f' date '16 December 2013' time '3:39:42.986 pm' author 'nice' ancestors ((name 'Compiler-fbs.278' message 'ParserNotification''s default action requires human input. As such, it doesn''t belong in as low-level a package as Compiler. For now I''m putting it in System, but perhaps there''s a better home for it.' id '4394bb64-4f64-f34a-8e10-6caaa5240e11' date '9 December 2013' time '10:47:08.413 pm' author 'fbs' ancestors ((name 'Compiler-fbs.277' message 'Tests belong in test packages. In this case, we have a test whose positive outcome is reflected in the system still running. Perhaps we ought to consider an Examples package, in which to collect these kinds of non-SUnit tests.' id '57b07f9f-33aa-ee43-bbe4-3f1876140ecc' date '9 December 2013' time '10:41:57.732 pm' author 'fbs' ancestors ((name 'Compiler-eem.276' message 'Access VariableNode''s index inst var directly instead ofreconstructing it form the code inst var.  This removes anartificial limit of 256 temps in any one method.' id 'e99950e7-3dd5-4d06-9647-f3742bdc5949' date '3 December 2013' time '11:47:59.234 am' author 'eem' ancestors ((name 'Compiler-cmm.275' message 'When loading code, don''t blow up just because of an undeclared ref.' id '9d002330-e75e-436f-8699-b29413e98e81' date '3 October 2013' time '2:34:56.409 pm' author 'cmm' ancestors ((name 'Compiler-nice.274' message 'Merge versions nice 272 and 273 and remove sourceStream inst. var. again.' id '3b9c2992-15d5-4c9e-99ea-235b6fe82dd1' date '24 September 2013' time '1:04:09.905 am' author 'nice' ancestors ((name 'Compiler-nice.273' message 'This is Compiler-nice.270 + restored (and unused) sourceStream instance variable so as to give a chance to the build.squeak.org server to build...The configuration map update-nice.246 will be modified to point on this, then we''ll merge later Compiler versions.' id '268ce6eb-318e-46e7-83b5-05bfe76473de' date '24 September 2013' time '1:00:52.329 am' author 'nice' ancestors ((name 'Compiler-nice.270' message 'More compiler clean-ups.A Compiler does compile, it does not classify.So add new messages to avoid passing a category to a Compiler, such category is essentially useless, except for displaying in SyntaxError!Then, no need to pass a category to CompilationCue, nor to a SyntaxErrorNotification, nor to a SyntaxError (in Tools).Also add and use new messages to avoid passing a nil context, requestor...We will remove some unused methods later.' id '96ead68a-0990-4917-9e75-4a9d0764ec7c' date '20 September 2013' time '9:39:56.005 pm' author 'nice' ancestors ((name 'Compiler-nice.269' message 'Remove sourceStream inst. var. from Compiler now that it is unused.Continue the cue refactoring and remove some now unused methods.Add a newSource instance variable to ReparseAfterSourceEditing so as to enable a compilation restart even in non interactive compilation mode.Let me remind that non interactive here means that the Compiler does not interact directly with the source code editor. But it can still interact thru a SyntaxError window popping up.Add a newSource instance variable to SyntaxErrorNotification, because the SyntaxError knows about this notification, it can pass the corrected code thru it.Add some support method for SyntaxError.' id 'bf291465-8d81-48c5-93e8-e73a254e2e59' date '18 September 2013' time '10:23:19.317 pm' author 'nice' ancestors ((name 'Compiler-nice.268' message 'Factor a bunch of similar code in Compiler.Get rid of sourceStream inst. var. in Compiler, there is already a source inst. var. in CompilationCue.Let source inst. var. in CompilationCue be a ReadStream rather than a String.Replace CompilationCue>>source usage with sourceStream to reflect this change.We might have to change the inst var name later...Introduce CompilationCue>>stringToLog which both isolates and explains some convoluted code.Use this stringToLog to fix a broken usage of the infamous (ReadStream on:from:to:) contents.' id 'fda44454-4b2c-4aaf-936a-d62bc9364a43' date '17 September 2013' time '11:17:38.847 pm' author 'nice' ancestors ((name 'Compiler-nice.266' message 'Do not convert punctuation characters ( [ { } ] ) ; . ^ | asSymbol, just let the token be the Character, except in two cases:- inside a literal array- after a literal quote if prefAllowUnicharSymbol' id 'c5010a51-42a8-43cb-8fbe-809ec7f24da8' date '6 September 2013' time '1:53:58.652 am' author 'nice' ancestors ((name 'Compiler-fbs.265' message 'Split SyntaxErrorNotification across Compiler and System by moving the #defaultAction to the System package. This way System overrides/monkey-patches Compiler.http://bugs.squeak.org/view.php?id=4795' id '00961f9b-78a5-43a7-aca1-2aeb683d9352' date '5 August 2013' time '6:55:53.738 pm' author 'fbs' ancestors ((name 'Compiler-fbs.264' message 'Use UIManager default inform: '''' during: [], not Utilities.' id 'd9be5381-8137-2e4a-be06-2000e13a240b' date '12 July 2013' time '8:52:28.613 pm' author 'fbs' ancestors ((name 'Compiler-nice.263' message 'Revert the halt in Encoder>>litIndex:' id '766022c9-7e62-b341-ade2-351101bd8ba4' date '29 April 2013' time '12:36:28.951 pm' author 'nice' ancestors ((name 'Compiler-eem.262' message 'Restore and improve upon the comment in LiteralVariableNode>>emitCodeForStore:encoder:' id 'b0593a62-a896-c24f-acf7-8edeeab9a81c' date '12 April 2013' time '4:10:28.001 pm' author 'eem' ancestors ((name 'Compiler-nice.261' message 'Fix decompiler tests that fails due to chained LiteralVariable (Binding) assignements.' id '310ada25-baad-40a6-a955-1314eb39e7bb' date '5 April 2013' time '10:24:06.754 pm' author 'nice' ancestors ((name 'Compiler-nice.260' message 'When we assign a special binding just for effect, the binding seems to be pushed twice on the stack1) once in emitCodeForLoad: stack forValue: false encoder: encoder.2) then in emitCodeForStore: stack encoder: encoderand IMHO it''s a bug because the binding is popped only once...I suggest a different and simpler implementation for emitCodeForStorePop:encoder: we don''t have to dup the value on the stack in this case.' id '82f1b6fa-9e25-43ac-823e-03ca6ea6971c' date '5 April 2013' time '2:35:00.651 am' author 'nice' ancestors ((name 'Compiler-eem.259' message 'Fix literal duplication with special bindings for classes.LiteralNode>>reserve: needs to use sharableLitIndex: ifit is a special binding.The decompiler is still broken by Compiler-eem.258 forv := SpecialBinding := expr.  But at least methods containingglobals are debuggable again.' id '5bca5ca6-0cbc-4c06-959f-219d601b27c0' date '3 April 2013' time '1:53:21.499 pm' author 'eem' ancestors ((name 'Compiler-eem.258' message 'Fix store of special bindings.  Exsting code dropped thevalue assigned from the stack, so v := binding := expr wouldleave v holding binding, not expr.  New code generates	push expr	push binding	duplicate expr (by pushTemp: of expr''s stack index)	send value:	pop' id '7721a43f-63e6-4524-bb6d-48eddc955654' date '3 April 2013' time '12:59:36.409 pm' author 'eem' ancestors ((name 'Compiler-eem.257' message 'Fix Decompiler now that Environments uses Alias.Alias isSpecialReadBinding and isSpecialWriteBinding and sois accessed by sending #value[:] and must be decompiledappropriately.' id '02f32284-4e16-4352-a766-7b3dd7a461b1' date '12 March 2013' time '1:35:51.456 pm' author 'eem' ancestors ((name 'Compiler-nice.256' message 'Continue cleaning of Compiler by removing now unused instance variables.Also remove CompilationCue>>sourceStream which is unused.' id 'f3619127-599b-4b0e-864b-9508047d84cf' date '25 February 2013' time '10:49:12.747 pm' author 'nice' ancestors ((name 'Compiler-nice.255' message 'Remove Parser ivars ''requestor'' and ''category'' again now that MC is patched.' id 'f1c697bd-c388-4d60-94bc-56a1dc731591' date '24 February 2013' time '11:55:43.511 pm' author 'nice' ancestors ((name 'Compiler-nice.254' message 'revert Parser instance variable change, and think...' id '5a873a42-0c07-47db-98d3-efdb4e059d15' date '24 February 2013' time '11:04:25.634 pm' author 'nice' ancestors ((name 'Compiler-nice.253' message 'clean-up Parser from now unused requestor/category' id 'e6c74d32-dbba-41ef-9315-f333c8ce18de' date '24 February 2013' time '10:43:13.671 pm' author 'nice' ancestors ((name 'Compiler-eem.252' message 'Yet another fix for decompilation of to:do: loops compiledwith Compiler-nice.224 or later.  If the stack is non-emptywhen convertDoDoLoop is invoked, the stack must be leftnon-empty.  This really does fix decompilation of e.g.	^nil to: 3 do: [:i| i class]and not just	true ifTrue: [^thisContext method decompile].	^nil to: 3 do: [:i| i class]' id 'eb0dde9d-1648-4b12-88ca-44c46fda0e9e' date '11 February 2013' time '1:35:53.482 pm' author 'eem' ancestors ((name 'Compiler-eem.251' message 'Yet another fix for decompilation of to:do: loops compiledwith Compiler-nice.224 or later.  If the stack is non-emptywhen convertDoDoLoop is invoked, the stack must be leftnon-empty.  This fixes decompilation of e.g.^nil to: 3 do: [:i| i class]' id 'caeb538b-aaa9-46a5-b43c-51dec9220273' date '11 February 2013' time '1:11:53.981 pm' author 'eem' ancestors ((name 'Compiler-eem.250' message 'Fix incomplete fix for decompilation of #to:do: loops inCompiler-eem.242.  Fixes decompilation of e.g. compilationof SoundRecorder>>segmentsAbove:normalizedVolume:when compiled with Compiler-nice.224 or later.' id '383b74a1-3e1e-4022-a509-aa4e746b333d' date '8 February 2013' time '3:48:22.229 pm' author 'eem' ancestors ((name 'Compiler-eem.249' message 'Simplify Parser>expression.  braceExpression is handled inprimaryExpression, as it should be.  The extra invocation inexpression is unnecessary, and harmlessly erroneous.Fix snafu with Compiler-eem.248 (slightly less circuitous generation of methods with temp names).' id '89a487ca-b4a7-482e-b57f-d0a62dca408a' date '8 February 2013' time '2:07:37.462 pm' author 'eem' ancestors ((name 'Compiler-eem.248' message 'Slightly less circuitous generation of methods with tempnames.  Since schematic temp names string is computedduring generation, best to generate a method and copyit with the computed temp names than generate twoseparate methods.' id 'c4da1b1b-b487-44bb-b8ef-392432ca421d' date '8 February 2013' time '11:33:58.616 am' author 'eem' ancestors ((name 'Compiler-cwp.247' message 'Environments bootstrap - stage 3' id '22f2cbf1-9186-4d2f-8c9c-dffcc0518ffa' date '1 January 2013' time '6:59:31.461 pm' author 'cwp' ancestors ((name 'Compiler-cwp.246' message 'Environments bootstrap - stage 2' id '54460c3c-db04-4159-8269-3bd83cc3c9f3' date '1 January 2013' time '6:57:00.489 pm' author 'cwp' ancestors ((name 'Compiler-cwp.245' message 'Environments bootstrap - stage 1' id 'ded24bcc-aeee-4129-94fa-2b2da294e964' date '1 January 2013' time '6:47:22.812 pm' author 'cwp' ancestors ((name 'Compiler-eem.243' message 'Use a smaller hammer to crack the same tiny nut.' id 'e2c4d1ed-4a14-4481-b887-dae54eecf492' date '14 November 2012' time '11:54:44.286 pm' author 'eem' ancestors ((name 'Compiler-eem.242' message 'Further fix decompilation of to:do: loops now they returntheir receiver.  Fixes the case where the loop is the laststatement in an ifTrue:ifFalse: branch, e.g. the recompilationof Object>>#veryDeepCopyWith:.' id '1f233dff-53b6-4ddd-977f-66550a4f0269' date '9 November 2012' time '2:22:42.152 pm' author 'eem' ancestors ((name 'Compiler-eem.241' message 'Fix decompilation of to:do: loops now they return their receiver.' id '2a0df8c2-f597-4958-9851-e290b9ac05f5' date '6 November 2012' time '1:59:52.95 pm' author 'eem' ancestors ((name 'Compiler-eem.240' message 'Have the decompiler map whileTrue/False: [] to whileTrue/Falseinstead of relying on MethodNode.  Fixes decompiler testsafter fixing printing of whileTrue/False: [] to be side-effect freein Compiler-eem.239.' id '7b6bc3de-112b-442d-8f73-3cafe5819fbc' date '6 November 2012' time '1:15:13.684 pm' author 'eem' ancestors ((name 'Compiler-eem.239' message 'Eliminate horrible side-effect in printing whileTrue/whileFalsenodes that undid the tranformation to whileTrue:/whileFalse:.' id '074c58f2-bc92-4c3f-adff-56c47d3884ef' date '5 November 2012' time '3:09:13.298 pm' author 'eem' ancestors ((name 'Compiler-eem.238' message 'Fix slip with return special literal encoding.' id 'fe35e20e-713b-4bb0-88e3-e3f8badf4921' date '2 November 2012' time '10:21:57.286 am' author 'eem' ancestors ((name 'Compiler-cwp.237' message 'Reinitialize String every time the #allowUnderscoreSelectors preference is changed, so that the Tokenish character map will be correct.' id '88c324fe-9302-4ec9-ba3c-beb6c3aae7d0' date '22 October 2012' time '12:41:37.581 am' author 'cwp' ancestors ((name 'Compiler-eem.234' message 'More accurate error reporting for incomplete brace expressions' id '1e69e4f6-4808-439b-b63d-2fc309ee87d0' date '8 October 2012' time '1:44:27.162 pm' author 'eem' ancestors ((name 'Compiler-eem.233' message 'Fix comment collection for blocks.  Old code forgot to nilcurrentComment after adding to a block.' id '231126f7-9b84-4261-bb3a-9f79e67fddf1' date '14 August 2012' time '6:50:49.205 pm' author 'eem' ancestors ((name 'Compiler-nice.232' message 'Patch scanAllTokenPositionsInto: to correctly scan end of method...This will result in an empty #doIt as the last token type.' id '8ab216d0-f621-4dc4-b50a-3b7697817cb2' date '13 August 2012' time '11:53:00.403 pm' author 'nice' ancestors ((name 'Compiler-eem.231' message 'Fix decompilation of inlined to:do: loops whose value is used(e.g. ^55 to: 57 do: [:i| self]).  Avoid using the sugared checkBlock:as:in the ifnil transformers that also use the unsugared checkBlock:as:maxArgs:' id 'd4dbfdb6-fea7-4583-b07a-e1e2fad7f090' date '15 May 2012' time '10:04:02.174 am' author 'eem' ancestors ((name 'Compiler-eem.230' message 'Add an exception handler to the emit phase of methodgeneration so that emitting too much code answers thesame error as emitting too little, instead of an ugly errorfrom the bowels of CompiledMethod class>>new:.' id '22de95f2-fdd6-41b0-8d2c-69fce3351216' date '8 May 2012' time '11:24:29.327 am' author 'eem' ancestors ((name 'Compiler-nice.229' message 'Add missing initialization in Decompiler>>decompileBlock:' id '1d6c6093-e2bb-4dce-92c0-3a4713132c54' date '22 April 2012' time '4:35:27.085 pm' author 'nice' ancestors ((name 'Compiler-eem.228' message 'Fix snafu in Compiler-eem.227 at: => at:ifAbsent:. in decompiler' id 'd35c5eea-e31b-440a-bc18-18a921444c4d' date '29 March 2012' time '3:53:13.947 pm' author 'eem' ancestors ((name 'Compiler-eem.227' message 'Hide the onceCache when decompiling.' id 'ba2dd2c9-e83b-48f2-877e-310826e49215' date '28 March 2012' time '6:34:18.679 pm' author 'eem' ancestors ((name 'Compiler-eem.226' message 'Fix bug in determining primitive error code offset (thanks Igor!)' id 'a6a82cc9-7f79-4c3b-a02c-5ba6ed476b05' date '20 March 2012' time '11:02:47.966 am' author 'eem' ancestors ((name 'Compiler-nice.225' message 'Remove the ugly hack in Parser>>expected: which was modifying the error message insertion mark depending on the fact that we were at end of token stream a,d/or end of source character stream.Replace it with a proper mark in Scanner>>scanToken that correctly take into account the two step of advance handled by the Scanner (stateful is harmful and require high precision surgery).While at it, set the error insertion mark after the $ character when offended by Scanner>>xDollar.This efficiently reduce the number of failures reported by CompilerNotifyngTest in its Tests-nice.144 version.' id '77bbb3ac-e939-4975-a139-f785dc94c17a' date '22 February 2012' time '2:57:07.872 pm' author 'nice' ancestors ((name 'Compiler-nice.224' message 'Just for fun, fix http://code.google.com/p/pharo/issues/detail?id=4915The inlined and non inlined versions of to:do: should answer the same result.Implementation notes:This happens to be the receiver of to:do:, and thus the initial value of the loop index.So we can trivially- push the value of init statement on the stack,- remove the final nil that was pushed forValue,- and leave the rest of code generation unchanged' id '15070f34-9c69-4407-a041-7659522fc95a' date '20 February 2012' time '10:56:20.223 pm' author 'nice' ancestors ((name 'Compiler-nice.223' message 'Correct a bug (see http://code.google.com/p/pharo/issues/detail?id=4650)self should: [Compiler evaluate: ''$''] raise: Error.I also simplified all the redundancy (aheadChar == DoItCharacter and: [source atEnd]) and replaced with aheadChar == DoItCharacter.Indeed, these were uggly incomplete guards trying to distinguish a DoItCharacter marking an end of stream from a (Character value: 30 "ASCII character RS means Record Separator") encountered in source...But they would not even handle the case when DoItCharacter is the last source character., except maybe the uggliest contorsions in xDigit...Instead I replaced the DoItCharacter marking the endOfStream by a character that we should never encounter in source.I have chosen 16r10FFFF which is the last unicode and will never be used to encode a character (as all ending in FFFE and FFFF).A different strategy would be to use a value greater than the last unicode, like 16r110000, and would also work...Or use a different Object. In this later case, the object would have to understand charCode or we would have to change more Scanner methods (at least typeTableAt:).Note that with current Character implementation, (Character value: 16r10FFFF) ~~ (Character value: 16r10FFFF).Since all tests are written with identity test aheadChar or hereChar == DoItCharacter, even if such Character were encountered in source, it wouldn''t be interpreted as an endOfStream mark, thus any Character code > 255 could have been used, but this would be more fragile.Consequently, I also modified the character type table to not interpret (Character value: 30) as end of source (#doIt).I think that it was previously possible to insert a (Character value: 30) in source, and everything after that would have been ignored (if not between quotes) and could potentially store meta information. But this was both undocumented and AFAIK unused. It''s easy to go back if we want to, by restoring previous version of #initializeTypeTable.While doing this, I noticed that (Character value: 30) will now be interpreted as binary as many other characters including invisible control characters...It could thus be used in a binary selector! That''s crazy and I suggest using xIllegal in the Character typeTable, since I had previously prepared this method...But one change at a time...' id '8c21622a-6317-4c71-ad1a-607ba1683e6c' date '9 February 2012' time '4:05:21.21 pm' author 'nice' ancestors ((name 'Compiler-nice.222' message 'Correct a potential bug: there is no reason to initialize the Encoder literalStream with a ReadStream since it''s always used as a WriteStream.I don''t have a test case for this, but Martin McClure encoutered some problems with this method in Pharo.' id '32e53e56-3fa4-46f0-9f90-59f92b3a19ba' date '20 November 2011' time '9:56:07.638 pm' author 'nice' ancestors ((name 'Compiler-ul.221' message 'Don''t leave an empty line after removing all unused temporary declarations.' id 'e7d854de-d6b7-da44-986c-0764cb7841f4' date '15 November 2011' time '3:52:35.902 pm' author 'ul' ancestors ((name 'Compiler-ul.220' message 'Integrated the Parser changes from http://bugs.squeak.org/view.php?id=7572 :Change Set:		parser-lwDate:			31 May 2011Author:			Lars WassermannChanged the Parser to	remove Block Local Temporaries	ask even if there are no method local temporaries	don''t ask several times for removal	don''t recommend to remove temporaries which are assigned to' id '1afd47cf-c700-2f43-a87b-e46ee1bcba39' date '15 November 2011' time '4:25:41.558 am' author 'ul' ancestors ((name 'Compiler-nice.219' message 'Let a binary selector be composed of vertical bars.Since st80, such selector were not composed at scan time because of ambiguity with empty temporaries spec || and latter with temporaries in a block of arity >0 like ^[:e|| tmp | tmp := e]But a hack in the Parser did authorize a single #| as a valid binary.Since- we can unambiguously extend this hack easily,- ANSI seems to tell it''s a valid binary character in a binary selector,- I never saw any grammar definition explicitely forbidding this,Let''s just do it.' id '871ffcae-841f-194e-ab14-0a7a493df385' date '24 October 2011' time '6:52:05.789 pm' author 'nice' ancestors ((name 'Compiler-nice.218' message 'Add a backward compatibility preference for allowing compilation of #, #. and other uni-character symbols.This is necessary for loading some outdated packages.' id '32663b2d-f5b4-4d87-bd75-22732f1821c0' date '4 October 2011' time '9:16:03.441 pm' author 'nice' ancestors ((name 'Compiler-eem.217' message 'Add MethodNode>>ensureNotQuick to allow forcing generatingnon-quick versions of quick methods (^self, ^inst var, et al).This is used by MwbreakpointWrapper.Yes this could arguably be a set of extensions inMethodWrappers, but it feels too intimate for that, andother compilers may want to implement the same API.' id '4b06bdff-bc34-4a41-b59d-8de0dc9bf16c' date '27 September 2011' time '3:51:31.614 pm' author 'eem' ancestors ((name 'Compiler-eem.216' message 'Use the methodForDecompile hook in decompile:in:.  Thisfixes infinite recursion when decompiling installed wrappermethods.  Needs Kernel-eem.630.' id '6876b6f4-047e-4ed9-81e6-9f49c02fcd00' date '27 September 2011' time '8:55:43.391 am' author 'eem' ancestors ((name 'Compiler-eem.215' message 'Compiler half of second part of changes to revive ability tocreate subclasses of CompiledMethod.  Other half isKernel-eem.620.' id 'a4ef4332-f69b-4675-8896-723edb2cf487' date '15 September 2011' time '5:09:54.028 pm' author 'eem' ancestors ((name 'Compiler-eem.214' message 'Compiler half of first part of changes to revive ability tocreate subclasses of CompiledMethod.  Other half isKernel-eem.619.' id '88e225e0-5e81-4d57-aadd-6b92a971fdd8' date '15 September 2011' time '4:30:28.005 pm' author 'eem' ancestors ((name 'Compiler-eem.213' message 'Help exotic compiler writers by pointing out thatbindBlockTemp: should not be used in BytecodeEncoder.' id '4168834b-c57f-477e-90ad-603e15b345c5' date '18 August 2011' time '5:45:08.905 pm' author 'eem' ancestors ((name 'Compiler-eem.212' message 'Add a useful validation check to the closure analysis.  Insistthat local variables have at most one defining scope.' id '7aa3630c-0547-4f85-821b-c1a9bb4dbbd5' date '18 August 2011' time '4:32:55.72 pm' author 'eem' ancestors ((name 'Compiler-eem.211' message 'Parse error: keyword in FFI pragmas/method tags.  RequiresFFI-Kernel-eem.24/FFI-Pools-eem.3.Fix BlockLocalTempCounter for all-return case statements.Make sure define class uses the non-meta-class.' id '500dbdbf-02ba-4414-a482-34f50dafbd38' date '8 July 2011' time '1:30:12.579 pm' author 'eem' ancestors ((name 'Compiler-ul.210' message '- Don''t send #forgetDoIts, because it''s not needed anymore.- Use #repeat instead of [ true ] whileTrue and friends.' id '9a16e9f7-e6a8-b249-9040-08ab3346a640' date '17 June 2011' time '4:31:17.171 pm' author 'ul' ancestors ((name 'Compiler-ul.209' message 'Added the missing class variable AllowBlockArgumentAssignment.' id 'e3f8ac39-c1bb-7b43-ba44-8447113e2649' date '10 June 2011' time '11:10:15.285 pm' author 'ul' ancestors ((name 'Compiler-ul.208' message '- added a pragma preference for #allowBlockArgumentAssignment. Migration code is in the postscript.- updated code using #allowBlockArgumentAssignment- removed Parser class >> #initialize which just installed now obsolete preferences' id '2bc142b2-8022-8d40-b4ca-f0bc566738ed' date '10 June 2011' time '11:00:02.811 pm' author 'ul' ancestors ((name 'Compiler-nice.207' message 'Oops, use #canDeclareInstanceVariable where due.This message was created on purpose, and has no reason to remain unsent.' id '592f6683-4ee7-483c-b723-50ba8fc53afb' date '20 April 2011' time '2:18:01.027 am' author 'nice' ancestors ((name 'Compiler-ul.206' message '- fixed Scanner''s comment- removed unsent obsolete method from Scanner- refactored Scanner >> #scanLitWord a bit- changed the postscript to recompile the senders of #repeat, just in case someone has broken methods' id '8cf4ce89-32f6-f04c-bbd5-8cb82cce271f' date '3 April 2011' time '2:18:08.993 am' author 'ul' ancestors ((name 'Compiler-nice.205' message 'Don''t forget to deoptimize the receiver of an optimized message in case of cascade.' id '1ff62b57-d6e2-43b6-8827-db4113196b24' date '2 April 2011' time '7:27:35.803 pm' author 'nice' ancestors ((name 'Compiler-ul.204' message 'Scanner changes:- added a new class variable DoItCharacter. All checks for doIt characters (30) should use this. (part 2)- reuse buffer in #xDoubleQuote instead of a custom stream' id '9a4461b2-a9c8-1a4e-82bc-40d15ff7ac7c' date '2 April 2011' time '12:53:54.869 am' author 'ul' ancestors ((name 'Compiler-ul.203' message 'Scanner changes:- introduced #character type for characters instead of #number (part 2)- updated comment- added a new class variable DoItCharacter. All checks for doIt characters (30) should use this. (part 1)- moved TypeTable initialization to a separate method- instance creation uses the common #initialize method instead of #initScanner- removed #initScanner and the class side #new- use #== instead of #= for symbol and character comparison- use #repeat instead of true and #whileTrue for loops- use #and: instead of #&' id '9817f32d-943f-4745-81b8-0ecaeec259d4' date '2 April 2011' time '12:50:39.599 am' author 'ul' ancestors ((name 'Compiler-ul.202' message '- reject literals with superfluous # at the beginning, like #$a #123 ##foo ##(1 2 3), etc- introduced #character type for characters instead of #number (part 1)' id 'e7e9151c-c2e9-b14a-bb57-68e6ea8daea5' date '2 April 2011' time '12:44:12.796 am' author 'ul' ancestors ((name 'Compiler-nice.201' message 'Put optimized selectors in CompiledMethod literals so that senders can be browsed normally.Take care to not overflow the scarse literal ressource.It is necessary to evaluate (Compiler recompileAll) before succesfully browsing senders of #ifNil:Thanks to Marcus at http://code.google.com/p/pharo/issues/detail?id=2559 for the idea.' id 'd694a5f8-4d75-2f4d-a06d-4c5de7fe1656' date '31 March 2011' time '12:45:32.697 am' author 'nice' ancestors ((name 'Compiler-nice.200' message 'minor ifNil refactoring' id 'e97c15bd-d6b0-b648-9bde-fb0e2ffde315' date '30 March 2011' time '10:47:39.106 pm' author 'nice' ancestors ((name 'Compiler-nice.199' message 'Use #newCompiler #newParserMove some #evaluate: methods to instance side to enable (self class newCompiler evaluate: ''nil'') usage' id '40f46685-08e8-4661-95bd-8be4327c963b' date '30 March 2011' time '9:56:40.201 pm' author 'nice' ancestors ((name 'Compiler-IgorStasenko.198' message 'Wiped out the rest of positional arguments cruft' id 'bf3a5d4c-f59c-3946-b327-5d4df44ac340' date '25 March 2011' time '2:19:06.814999999 pm' author 'IgorStasenko' ancestors ((name 'Compiler-ar.197' message 'Remove left-over cruft for positional args in scanner.' id '6eb026eb-8e91-d844-b9c0-6dbe7997385a' date '25 March 2011' time '9:17:09.411 am' author 'ar' ancestors ((name 'Compiler-ul.196' message '- minor tweaks' id 'c6499e3d-db6c-704f-b00e-243584dd2543' date '15 March 2011' time '1:46:35.738 pm' author 'ul' ancestors ((name 'Compiler-ul.195' message '- use #== for character comparison, #asciiValue for value comparison.' id '330dc985-d425-1a44-bdda-e67bdb1df894' date '13 March 2011' time '8:50:34.098 pm' author 'ul' ancestors ((name 'Compiler-nice.194' message 'Fix cascading of special messages.During inlining of some special messages, the MessageNode selector and/or arguments might be destructively replaced.(for example #ifFalseifTrue: ifNil:ifNotNil: etc...)If we later decide to un-optimize, it is necessary to restore the originalSelector and originalArguments.(for example when these messages are cascaded)Also fix a bug occuring when decompiling these cascaded specials.Thanks to Juan for testing/enhancing this useless but beautiful stuff.TODO: automate some tests.' id 'de6fad00-fa6c-4622-9c03-046113d7e4fe' date '4 March 2011' time '4:51:51.372 am' author 'nice' ancestors ((name 'Compiler-ul.193' message '- removed guarding clauses from MessageNode''s #checkBlock:as:from:maxArgs: and #transformCase:- removed all implementations of #canBeSpecialArgument' id '2676a6c5-2140-814f-b508-e35126bd2c85' date '28 February 2011' time '7:27:29.293 am' author 'ul' ancestors ((name 'Compiler-nice.192' message 'Let #caseOf: accept any ParseNode argument, not just BraceNode and VariableNode.Remove usage of canBeSpecialArgument which is now unsent.' id '3be37582-d3a2-4825-8210-073dd0af3f61' date '20 February 2011' time '5:12:00.371 pm' author 'nice' ancestors ((name 'Compiler-ul.191' message 'Restored VariableNode >> #canBeSpecialArgument, which got lost with Compiler-nice.188 for some unknown reason. It is required to compile #caseOf: with non-brace array arguments.' id 'a7628e80-ae41-e348-b9b0-6b5f475cd90b' date '19 February 2011' time '10:02:37.736 pm' author 'ul' ancestors ((name 'Compiler-ul.190' message '- changed the postscript to recompile all methods which send #repeat' id 'e4670946-be62-fd47-ab36-484978188552' date '13 February 2011' time '8:57:40.179 pm' author 'ul' ancestors ((name 'Compiler-nice.189' message 'Enable cascading of special messages by deoptimizing, thanks Eliot.This is mostly useless, but it removes an arbitrary limitation of the language.' id '3f6f02cd-1acf-48de-a388-b5ac55e27055' date '13 February 2011' time '7:44:38.363 pm' author 'nice' ancestors ((name 'Compiler-nice.188' message 'Merge fbs.183 nice.186 nice.187 coming from inbox' id '66ccdff2-05b9-4294-9b3b-0bf2d84417fd' date '13 February 2011' time '7:39:55.07 pm' author 'nice' ancestors ((name 'Compiler-nice.187' message 'In case nil is the doItReceiver of an interactive evaluation, avoid proposing a menu that would add an inst var to UndefinedObject.' id '71dd94ed-3fc7-49e0-b180-fb04be82bc29' date '4 February 2011' time '10:17:14.337 pm' author 'nice' ancestors ((name 'Compiler-nice.184' message 'Fix DecompilerTests>>#testDecompileLoopWithMovingLimitA to:do: loop cannot modify the limit inside the block' id 'ba12fb9c-6c57-429b-b415-1188e1faba8b' date '12 January 2011' time '10:09:27.038 pm' author 'nice' ancestors ((name 'Compiler-nice.183' message 'Cosmetic: rename two shadowing temps in order to avoid warnings in Transcript' id '228c16fb-1ba3-407c-84fd-d5722ca2be2f' date '29 December 2010' time '3:54:57.862 pm' author 'nice' ancestors ((name 'Compiler-ul.182' message '- removed #isLiteral from the ParseNode hierarchy, because it means something else. Added #isLiteralNode instead.' id 'ee785fb8-9a21-9b4a-a451-03f648a97ded' date '23 November 2010' time '1:37:48.497 pm' author 'ul' ancestors ((name 'Compiler-nice.181' message 'Let (Scanner isLiteralSymbol: #<) be true' id '86d69779-755f-0548-8a95-11173c3b8370' date '19 November 2010' time '5:32:20.688 pm' author 'nice' ancestors ((name 'Compiler-eem.180' message 'Fix ''#_'' == #'':='' (a.k.a. http://bugs.squeak.org/view.php?id=7571)' id '1f74b18a-ff12-463a-b255-aacc6363866e' date '16 November 2010' time '3:21:08.417 pm' author 'eem' ancestors ((name 'Compiler-ul.179' message '- use #= for integer comparison instead of #== (http://bugs.squeak.org/view.php?id=2788 )' id '107e924e-8060-0d48-a735-4e21340dffd8' date '16 November 2010' time '4:43:43.297 am' author 'ul' ancestors ((name 'Compiler-ul.178' message '- "fix" some decompiler tests' id '48ba6d35-c609-554f-aa46-b0c00211df90' date '28 October 2010' time '4:10:34.353 am' author 'ul' ancestors ((name 'Compiler-ul.177' message '- renamed #prefAllowUnderscoreAssignments to #allowUnderscoreAsAssignment for compatibility AST (and OB)' id '4e157cbb-4abd-4649-aeef-0213fdfe1399' date '28 October 2010' time '12:44:19.763 am' author 'ul' ancestors ((name 'Compiler-ul.176' message '- replace LiteralDictionaries with PluggableDictionaries part 2.' id 'f99f8cfe-e153-bb4e-b917-74dc15472d5a' date '24 October 2010' time '7:33:17.308 am' author 'ul' ancestors ((name 'Compiler-ul.175' message '- replace LiteralDictionaries with PluggableDictionaries part 1.' id 'de13fc25-c32d-3444-986d-8d54b0c34689' date '24 October 2010' time '7:32:36.364 am' author 'ul' ancestors ((name 'Compiler-nice.174' message 'Prevent the compiler to be pedantic with inlined messages.When the selector is special (#ifTrue:ifFalse: #to:do: etc...), but the receiver or the arguments are not the Block expected by the inliner, the compiler pedantically #notify: the user and refuse to compile.Change this behaviour so that a normal send occurs.' id '61855825-aa9b-47ef-a4cb-cbf9e34486f5' date '10 October 2010' time '5:51:12.369 pm' author 'nice' ancestors ((name 'Compiler-nice.173' message 'Compiler fix for http://bugs.squeak.org/view.php?id=7093Avoid optimizing a to:do: loop that does modify its limit inside the loop. Thanks Eliot!Note: an alternate solution would be to create a shadow variable, assign it with the limit, and optimize the block.Note 2: the bug report also has a so far uncorrected Decompiler part and cannot be closed yet.' id 'f40f6937-a88a-4f85-b0b0-f68b310a1d92' date '8 September 2010' time '1:36:04.973 am' author 'nice' ancestors ((name 'Compiler-eem.172' message 'Fix decompilation/pretty-print of expr ifNotNil: [:var| which used tobe rendered as (var := expr) ifNotNil: [:var|.' id 'cbf01579-162b-43d4-ab9e-1099261e3570' date '31 August 2010' time '12:45:25.496 pm' author 'eem' ancestors ((name 'Compiler-nice.170' message 'minor change: avoid creating a SortedCollection when not necessary...asSortedCollection asArray -> asArray sort' id 'f8a249cf-597d-472c-b45f-797a28d2d476' date '22 August 2010' time '8:52:09.947 pm' author 'nice' ancestors ((name 'Compiler-eem.169' message 'Allow the user to choose at what level to delcare an undeclared temp,either method-level or block-local.' id '527cab12-cb40-42f0-bf0e-3eb940dca528' date '17 August 2010' time '5:17:57.955 pm' author 'eem' ancestors ((name 'Compiler-eem.168' message 'Merge with Compiler-nice.164.Fix the case of special write binding.Reminder: in case of special write binding, we must:	1) load the VariableBinding	2) push assigned value	3) send value:(see AssignmentNode>>emitCodeForEffect:encoder: )#sizeCodeForLoad: read inst var writeNode#sizeCodeForStore: write inst var writeNode#sizeCodeForLoad: is sent before #sizeCodeForStore:Therefore writeNode is read before written and the door is open for bugs.Fortunately, #sizeCodeForStore: redo the job of #sizeCodeForLoad: and reserve space for pushing the VariableBinding on stack.Unfortunately, it sometimes happens that the sizeCodeFor... is requested twice, the writeNode is then initialized and sizeCodeForLoad: reserve space for pushing VariableBinding a second time leading to a code size discrepancy...Present fix implement following solution:1) let sizeCodeForLoad: reserve size for emitCodeForLoad:encoder: operations, but don''t trust writeNode isNil for this job.2) let sizeCodeForStore: reserve size for - and only for - emitCodeForStore:encoder: operations.' id '0757e13e-9323-4603-927b-224965d39773' date '17 August 2010' time '5:15:54.534 pm' author 'eem' ancestors ((name 'Compiler-eem.166' message 'Third and final stage of old parse node emitters and sizers cleanup.Merges BytecodeAgnosticMethodNode into MethodNode anddeletes BytecodeAgnosticMethodNode.' id '04c47990-84b1-4832-ac47-c0c16ae18b71' date '17 August 2010' time '2:34:59.272 pm' author 'eem' ancestors ((name 'Compiler-eem.165' message 'Stage two cleanup of the old parse node sizers & emittersAlso:Streamline Compiler>>#compile:in:classified:notifying:ifFail: .  requestor: send is unnecessary.Fix comment typo inScanner>>scanAllTokenPositionsInto:' id 'f895af78-0bd4-4e18-94ba-0c69837d298e' date '17 August 2010' time '2:29:01.49 pm' author 'eem' ancestors ((name 'Compiler-eem.164' message 'Stage one cleanup of the old parse node sizers & emitters' id 'ea2d2d68-7509-45b6-a835-b038702661b5' date '17 August 2010' time '2:00:44.208 pm' author 'eem' ancestors ((name 'Compiler-eem.163' message 'Fix compilation after error correction.  If interactive then on correctionthe entire text should be recompiled if the entire text was input (e.g.compiling a method in a browser).  But if a selection was compiled(e.g. doit in a workspace) then the current selection should berecompiled.Fix VariableScopeFinder for cascades.' id 'cd09cd52-fc4d-4999-83a6-0c89585a4caa' date '16 August 2010' time '6:35:39.357 pm' author 'eem' ancestors ((name 'Compiler-eem.159' message 'Declare temps at the minimum enclosing block scope.  Requiresdeferring temp declarations until after the parse has completed.So introduces an UndeclaredVariableNode type to stand in untilparse completes.  VariableScopeFinder visitor finds scopes.Fix Parser>>removeUnusedTemps after a declare temps.removeUnusedTemps cannot use encodeVariable: to lookupout-of-scope temps; these will cause undeclared: sends withinencodeVariable:.Fix Parser>>#parse:class:category:noPattern:context:notifying:ifFail:''sselection of the stream after ReparseAfterSourceEditing.  It mustgrab the selectionInterval from the requestor''s string, not the entirestring.Resolve the ambiguous time stamp (almost certainly my fault) inCompiler>>#from:class:classified:context:notifying:  between ourrep and trunk''s rep by neatening method.' id '8072bba0-f0b2-460b-a430-943e289578fc' date '15 August 2010' time '9:31:05.594 am' author 'eem' ancestors ((name 'Compiler-eem.157' message 'Log class def on declare inst and class var.Fix typo in ParseNodeVisitor>>visitMessageNode:' id '3ac53cb6-e964-4315-b7ad-262434f9870e' date '14 August 2010' time '8:26:40.54 pm' author 'eem' ancestors ((name 'Compiler-eem.156' message 'The addition needed by the new explainTemp: code.(Humble mumble, I forgot to add this and hence mentionthat Morphic-eem.460 & ST80-eem.117 need this method)' id 'a59d6f06-25d9-4c94-8190-c287ecf7e661' date '14 August 2010' time '7:38:55.109 pm' author 'eem' ancestors ((name 'Compiler-eem.155' message 'Fix comment and computation of error temp push inBytecodeAgnosticMethodNode>>generate:.  Removea couple of unused methods.' id 'e1d7ed32-bfbf-47c8-9a5e-8420449259ba' date '14 August 2010' time '6:21:02.179 pm' author 'eem' ancestors ((name 'Compiler-eem.154' message 'Fix decompilation of blocks with indirect temps, e.g.	| x y |	[:a :b | x := a. y := b. x+y] decompileCorrect comment of evaluate:in:to:notifying:ifFail:logged: notwe no longer install doits in dictionaries but use withArgs:executeMethod:' id '38a702f7-88c0-4176-9213-ce25c77bd3ef' date '12 August 2010' time '2:04:48.383 pm' author 'eem' ancestors ((name 'Compiler-nice.153' message 'Use more explicit storeStringHex rather than floating hex in order to be more robust.' id 'aa667119-b47a-44af-8bad-ff79f3c51d81' date '25 July 2010' time '12:27:53.774 pm' author 'nice' ancestors ((name 'Compiler-nice.152' message 'Add the possibility in new code generation scheme to access shared variables by sending message #value to the variable binding instead of fetching second instance variable.This did already exist in old code generation scheme and is controlled by #isSpecialReadBinding.' id '11850e30-a071-425e-a01a-a52faffbddcd' date '24 July 2010' time '6:38:46.043 pm' author 'nice' ancestors ((name 'Compiler-jcg.147' message 'Change Parser>>correctVariable:interval: to allow it to look up the proposed variable in the requestor even if it starts with an uppercase letter.' id '714d775f-78af-45dc-affc-b33d59d68da5' date '23 June 2010' time '12:04:54.856 pm' author 'jcg' ancestors ((name 'Compiler-nice.146' message 'Use at:ifAbsentPut: (Pharo)' id '31f1f318-aa1d-db43-b92c-b8a28025e710' date '12 June 2010' time '2:28:03.552 am' author 'nice' ancestors ((name 'Compiler-ar.145' message 'Merging Compiler-HenrikSperreJohansen.144Fix for BlockClosure decompilation in Workspace doits.Previously, blocks with remoteTemps would fail to decompile, f.ex:| x y |[:a :b | x := a. y := b] decompile(http://code.google.com/p/pharo/issues/detail?id=767)Also, temp names would not be preserved when inspecting a non-remoteTemps block, say[:x :y | | temp | 1 + x@y. ^temp] decompile printString.Getting the instvar names from MethodTrailer if present in decompileBlock:  solves both these issues.(ar: restore formatting and refer to SyntaxErrorNotification directly)' id '932818d3-1aeb-104b-826b-60c5a6f6f6a1' date '27 May 2010' time '9:38:04.277 pm' author 'ar' ancestors ((name 'Compiler-HenrikSperreJohansen.144' message 'Fix for BlockClosure decompilation in Workspace doits.Previously, blocks with remoteTemps would fail to decompile, f.ex:| x y |[:a :b | x := a. y := b] decompile(http://code.google.com/p/pharo/issues/detail?id=767)Also, temp names would not be preserved when inspecting a non-remoteTemps block, say[:x :y | | temp | 1 + x@y. ^temp] decompile printString.Getting the instvar names from MethodTrailer if present in decompileBlock:  solves both these issues.' id 'a77bbe8a-ac19-4883-943a-a47c1a8db1ad' date '27 May 2010' time '2:17:23.995 pm' author 'HenrikSperreJohansen' ancestors ((name 'Compiler-ar.143' message 'Verify the number of arguments in FFI calls.' id 'af1d9aa9-96ff-9e4f-9df9-94e11682c0b4' date '24 May 2010' time '8:42:36.032 pm' author 'ar' ancestors ((name 'Compiler-ar.142' message 'Merging Compiler-eem.140:Fix code gen infinite recursion and missing error check for compiling assignments to read-only global variables.' id '65ec869f-4768-694d-9a0f-75e19f7f0510' date '20 May 2010' time '7:40:40.375 pm' author 'ar' ancestors ((name 'Compiler-ar.141' message 'Eliot''s fix for http://bugs.squeak.org/view.php?id=7532. See discussion at http://lists.squeakfoundation.org/pipermail/squeak-dev/2010-May/150688.html' id '14b2de31-b380-394f-a25b-4679e7800c8c' date '16 May 2010' time '6:22:58.961 pm' author 'ar' ancestors ((name 'Compiler-nice.140' message 'Merge Compiler-nice.139 (inbox)This includes following fix from Eliotnil out locals in a block if readBeforeWritten- Use noteOptimizedIn: instead of noteOptimized- Let accept: return the result of message sent to visitor' id '1f71c916-4e14-4042-ac19-41c428f1968a' date '21 April 2010' time '9:25:46.66 am' author 'nice' ancestors ((name 'Compiler-ar.139' message 'Fix decompilation not to truncate very long decompiled methods.' id 'c15d727c-a890-224c-b427-5d6eea33efed' date '17 April 2010' time '5:18:44.704 pm' author 'ar' ancestors ((name 'Compiler-nice.138' message 'Fix http://bugs.squeak.org/view.php?id=7491Scanner new scanTokens: ''1@-1''.=> Scanner doesNotUnderstand: #ambiguousSelector:inRange: ' id '15955722-1326-a940-9805-280830c59af6' date '2 April 2010' time '7:40:24.521 pm' author 'nice' ancestors ((name 'Compiler-ar.137' message 'Underscore assignments and underscore selector preferences and implementation. The defaults are set to be compatible with past usage, i.e., allowUnderscoreAssignment is true and allowUnderscoreSelectors is false. Might consider changing this after 4.1.' id '090fc365-fe3c-6741-a731-3222d6ab6afa' date '24 March 2010' time '1:25:23.067 am' author 'ar' ancestors ((name 'Compiler-nice.136' message 'Multiple automatic AmbigousSelector replacement was broken dur to subtle requestorOffset magic. Attempt a correction.I just made the replacement work, but the second occurence selection just flash , I don''t know why.I do not really understand what I programmed... This is a door open to future bugs.The requestorOffset inst var in Parser looks like a fragile construction to me. I dont understand selectInvisiblyFrom:to: neither...Not sure what happens if we mix UnsedVariable, AmbiguousSelector and other automatic corrections.Probably more work on this subject' id '282cba3c-3e76-064d-b111-3741aa1a3745' date '10 March 2010' time '9:39:11.938 am' author 'nice' ancestors ((name 'Compiler-nice.135' message 'move OutOfScopeNotification to Compiler' id '6157c6e3-16a1-6b46-80f0-6ab3bdf09d71' date '8 March 2010' time '10:11:35.22 pm' author 'nice' ancestors ((name 'Compiler-nice.134' message 'move SyntaxErrorNotification where it belongs, CompilerThis creates a dependency on ToolSet, but Compiler did already depend on System.' id '4c30f651-0c40-a744-ac9c-8528032a661e' date '8 March 2010' time '9:07:25.575 pm' author 'nice' ancestors ((name 'Compiler-ar.133' message 'Avoid dictionary protocol in Smalltalk.' id '58d808cd-29dd-0e42-959e-751b789cc767' date '5 March 2010' time '8:50:43.246 pm' author 'ar' ancestors ((name 'Compiler-ar.132' message 'Use Smalltalk globals instead of Smalltalk as default environment.' id '576cee71-0637-ee4a-9f36-547cae3cedcb' date '5 March 2010' time '7:54:14.389 pm' author 'ar' ancestors ((name 'Compiler-ar.131' message 'Having removed the last uses of SyntaxError to indicate non-interactive compile, simplify Parser/Compiler>>interactive to just test for non-nil requestor.' id '5a06205c-1edd-454e-97d5-e6db20aed3b1' date '4 March 2010' time '11:45:13.288 pm' author 'ar' ancestors ((name 'Compiler-nice.130' message 'Provide a better fix for http://source.squeak.org/trunk/Compiler-nice.129.mczBlockNode>>#addRemoteTemp: rootNode:was always sent to the TempVariableNode definingScope...But BlockNode>>#optimizedBlockHoistTempsInto:might already have moved the temporaries to next upper unoptimized BlockNode (definingBlock actualScope).This operation does not update the TempVariableNode definingScope (should it ?)Thus, only when definingScope temporaries does not include the TempVariableNode,should we attempt to remove it from actualScope temporaries....Note: this does not solve (EventSensor>>#eventTickler) decompileWithTemps' id 'cdff6f07-1e9b-f746-a7b1-2cd22feb03b4' date '2 March 2010' time '1:28:40.263 am' author 'nice' ancestors ((name 'Compiler-nice.129' message 'Fix Compiler/Decompiler temporary slot mismatchhttp://bugs.squeak.org/view.php?id=7467See also my comments in response tohttp://lists.squeakfoundation.org/pipermail/squeak-dev/2010-March/145280.htmlEliot, please check....' id 'a27b827d-1354-1147-bc1a-edeb6e1f0e97' date '1 March 2010' time '11:24:30.271 pm' author 'nice' ancestors ((name 'Compiler-nice.128' message '1) Cuis 2.2 ParserSmallFix2) simplification method:context:encoder: replaced by method:context:' id 'd8c8b1f6-f75a-554d-9277-cb68ee0202f7' date '26 February 2010' time '12:23:36.467 am' author 'nice' ancestors ((name 'Compiler-nice.127' message 'Let this one raise a SyntaxError thanks to earlier encoder initialization:Compiler evaluate: ''0r0 + 1''' id '5f00acd4-a5a9-d94a-9406-74281252e74f' date '25 February 2010' time '3:33:15.468 am' author 'nice' ancestors ((name 'Compiler-nice.126' message 'Implement a Parser compatibility layer in Scanner: #notify:at:.I used it for inserting NumberParser errorString...Alas, it is not understood by Scanner, only by Parser.Alternative #offEnd: lacks of precision regarding position, so I clearly prefer implementing the compatible message.' id 'e08279be-3286-9144-a08f-c8debbbc6c25' date '25 February 2010' time '3:02:54.127 am' author 'nice' ancestors ((name 'Compiler-nice.125' message 'Let Parser better signal NumberParser errors.' id '627a24a0-8e6d-1944-86f9-2a7ae9bf5216' date '25 February 2010' time '2:50:32.978 am' author 'nice' ancestors ((name 'Compiler-nice.124' message 'Use a Text emphasizing error message in bold red rather than a String in SyntaxErrorNotification.Maybe this would find a better place in the handling of notification, but this change was easier.' id '06c8a9e4-1a69-b04b-88d5-539160553a1d' date '25 February 2010' time '2:15:08.187 am' author 'nice' ancestors ((name 'Compiler-nice.123' message 'Warn about ambiguous selector like @- in the Transcript when compiling in non interactive mode.' id '618554a7-dfec-f441-9383-e4da0a507ad0' date '25 February 2010' time '2:12:07.522 am' author 'nice' ancestors ((name 'Compiler-nice.122' message 'Forbid the construction (-  1)The minus sign now MUST NOT be separated from the literal number.RATIONALE: this syntax is not Smalltalk, not portable, not documented, not the same inside #(- 1) and is just adding confusion to the -1 rule, especially since the binary selectors can now embed a $- at any place.WARNING: THIS MIGHT INTRODUCE INCOMPATIBILITY IN PACKAGESwe might introduce a Preferences if the case shows up.I did a Compiler recompileAll, which works fine in trunk.In order to achieve this, I had to first correct the hereEnd and mark instance variables near end of stream.The scanner scans two letters ahead, so it clearly has to test both aheadChar then hereChar.Previously, it did decide on source atEnd and hereChar only, which was a bogus for example in case of a trailing separator in source.WARNING: hope this won''t break any obscure workaround in Debugger selection.' id '74bd56ce-6d06-c446-bd8b-eac2908c4b0b' date '24 February 2010' time '2:02:09.348 am' author 'nice' ancestors ((name 'Compiler-nice.121' message 'Change requestorOffset initialization order so that I can evaluate#(1--2) and get automatic correction working' id 'e13bfbb0-f02a-484c-b76e-e6f8f07e8917' date '23 February 2010' time '5:50:41.052 pm' author 'nice' ancestors ((name 'Compiler-nice.120' message 'Authorize - at any position in binary selectors (like VW 7.7)See http://bugs.squeak.org/view.php?id=3616Address the problem of compiling 1@-2 with following strategy:If compiler is non interactive, then compile with backward compatibility 1 @ (-2).If compiler is interactive, propose a menu to disambiguate and insert a proper space.1@ -2 -> MessageSend receiver: 1 selector: #''@'' argument: -21@- 2 -> MessageSend receiver: 1 selector: #''@-'' argument: 2Warning: Squeak did understand (1@-   2) as (1 @ (-2))....I didn''t do anything to support this vicious Squeakism, and by now the semantics are change.' id '9429cc05-281b-484e-94c2-bd0baf4f5230' date '23 February 2010' time '5:14:44.049 pm' author 'nice' ancestors ((name 'Compiler-nice.119' message '1) Connect Number class>>#readSqueakSyntaxFrom:2) remove a now useless fixTemps' id '88476d19-0098-e244-9ed8-14b04fe84dac' date '23 February 2010' time '2:44:50.52 pm' author 'nice' ancestors ((name 'Compiler-ar.118' message 'Provide a defaultResumeValue for UndeclaredVariableWarning.' id '47b851d8-d2a5-6049-bd90-22ca9853bb9b' date '13 February 2010' time '3:26:20.872 pm' author 'ar' ancestors ((name 'Compiler-ar.117' message 'Better progress in Compiler>>recompileAll.' id '289998b9-e67d-524b-a05a-49efd3bac2bf' date '12 February 2010' time '12:56:09.748 am' author 'ar' ancestors ((name 'Compiler-ul.116' message '- don''t create a block in Dictionary >> #bindingOf:' id '29cfe126-9fa7-0149-9c25-e068d536b0b9' date '25 January 2010' time '10:40:59.752 pm' author 'ul' ancestors ((name 'Compiler-ar.115' message 'Making Tests unloadable: Move Compiler-Tests to Tests-Compiler.' id '210eedd3-6a9f-f541-8699-2dbe477bb147' date '4 January 2010' time '4:27:09.715 pm' author 'ar' ancestors ((name 'Compiler-ar.114' message 'Make Etoys unloadable: Move Etoys content to Etoys package.' id '415ca0c9-3f8a-204f-950f-d09c6445de70' date '4 January 2010' time '12:36:33 pm' author 'ar' ancestors ((name 'Compiler-ar.112' message 'Remove unnecessary XMLWriter dependency from a compiler test.' id '6ebd47ad-90c6-c646-952e-75ee317c35e0' date '3 January 2010' time '2:24:27 am' author 'ar' ancestors ((name 'Compiler-nice.111' message 'Cosmetic: move or remove a few temps inside closures' id '46325f49-4b22-499c-aa2d-9cc5f16ebd65' date '27 December 2009' time '5:01:29 am' author 'nice' ancestors ((name 'Compiler-nice.110' message 'Add support for parsing parameter names' id '017eda80-c544-4827-bdc3-54f6cadca3f3' date '25 December 2009' time '7:15:24 am' author 'nice' ancestors ((name 'Compiler-ar.109' message 'CompiledMethodTrailer phase 3.' id 'e99fcffd-5f6d-aa4a-b09a-fb3248edc7f8' date '22 December 2009' time '12:58:44 pm' author 'ar' ancestors ((name 'Compiler-ar.108' message 'CompiledMethodTrailer phase 2.' id '538bb76e-8967-e445-9b2c-161c98c289d6' date '22 December 2009' time '12:48:23 pm' author 'ar' ancestors ((name 'Compiler-ar.107' message 'CompiledMethodTrailer phase 1: Preparations.' id '46345836-169c-a245-aa07-b546b826fdc4' date '22 December 2009' time '12:38:17 pm' author 'ar' ancestors ((name 'Compiler-jcg.106' message 'Inline the transformation defined by FutureMaker in Kernel-jcg.329.' id 'a95c76dc-5670-3c45-af7e-75c89f852c95' date '18 December 2009' time '12:12:50 pm' author 'jcg' ancestors ((name 'Compiler-ul.105' message '- marked unimplemented mirror primitives'' tests as expected failures in MirrorPrimitiveTests' id 'c9f122e9-5eb7-f747-afe6-d8f2f186d740' date '15 December 2009' time '8:26:03 am' author 'ul' ancestors ((name 'Compiler-ul.104' message '- enh: DecompilerTests is a subclass of LongTestCase. If you don''t want to run long tests (this is the current default behavior),  just do it: LongTestCase doNotRunLongTestCases. If you want to enable them again, then do it: LongTestCase runLongTestCases.' id 'a99aecca-760a-964f-8ba4-20bc62b24d28' date '9 December 2009' time '11:15:41 am' author 'ul' ancestors ((name 'Compiler-ul.103' message '- faster Scanner >> #initScannerForTokenization (by a factor of ~3.38)' id '8100e26f-3d13-9f48-9218-a8fd95ca5347' date '6 December 2009' time '8:00:45 am' author 'ul' ancestors ((name 'Compiler-ul.102' message '- lifted a missing change from Pharo for ByteArray literals- ScannerTest >> #testLiteralSymbols and a test in DecompilerTestFailuresCollector pass now' id 'b4de7fcc-4713-aa42-ac62-f7f1de2b6c16' date '3 December 2009' time '6:04:35 am' author 'ul' ancestors ((name 'Compiler-ul.101' message '- fix: #[ is not a valid literal anymore, so Scanner isLiteralSymbol: #''['' should return false (instead of syntax error). This also fixes broken tests: ScannerTest >> #testLiteralSymbols and a test in DecompilerTestFailuresCollector' id '0c2468f7-4619-0743-8f4e-14bdc2f195c6' date '2 December 2009' time '7:09:46 am' author 'ul' ancestors ((name 'Compiler-nice.100' message 'Let token be '':='' when := is used for assignment.This used to make some Decompiler tests fail...http://code.google.com/p/pharo/issues/detail?id=740' id '03472bb2-f89b-b040-ae9b-4e07e714b59b' date '1 December 2009' time '3:45:36 am' author 'nice' ancestors ((name 'Compiler-nice.99' message 'rename scanLitByte -> scanLitByteVec as suggested by Eliot' id 'ddf7600a-55a4-4d6f-964a-14a5301a415d' date '27 November 2009' time '11:14:24 am' author 'nice' ancestors ((name 'Compiler-nice.98' message 'Add support for literal ByteArray #[1 2 3]' id '4853aa4f-5bcb-e242-a130-f41f2c4d09ae' date '27 November 2009' time '12:54:16 pm' author 'nice' ancestors ((name 'Compiler-cwp.97' message 'Added a test that demonstrates a bug in block copying. If a block containing a return is copied, it will raise BlockCannotReturn when it''s evaluated, even if the home context is still on the stack.http://bugs.squeak.org/view.php?id=7414' id '815de973-26b4-4f93-b1ee-4905e56fa4b3' date '16 November 2009' time '8:35:05 am' author 'cwp' ancestors ((name 'Compiler-nice.96' message 'Test and minimal change to isLiteralSymbol: to make the test pass.This is related to http://bugs.squeak.org/view.php?id=7211I did not apply change proposed above, though it might be a good idea to restrict unquoted notation to explicitely documented valid Smalltalk literals.There are pending decisions about wide characters and binary selectors to be resolved first.' id 'bfe3f3dc-3f22-c04f-974e-90cb4725b53e' date '27 October 2009' time '3:25:48 am' author 'nice' ancestors ((name 'Compiler-nice.95' message 'Be verbose in case of illegal characterThis might be usefull if the character is not not visible, or not displayable by current font.' id '33175bf0-fc6b-7f4f-ba04-3433f42610f9' date '27 October 2009' time '2:58:34 am' author 'nice' ancestors ((name 'Compiler-nice.94' message 'Ensure usage of #typeTableAt:  rather than typeTable ivar to handle Wide characters' id '42292a5b-3735-fc4b-883b-42249a88aac9' date '27 October 2009' time '12:28:57 pm' author 'nice' ancestors ((name 'Compiler-nice.93' message 'Fix a test I broke : the test now needs (keys asSet)' id '27c49fc6-0091-4311-988d-aedff3653a8f' date '23 October 2009' time '11:57:51 am' author 'nice' ancestors ((name 'Compiler-jcg.92' message 'ParseNode>>notYetImplemented is no longer necessary, now that the implementation inherited from Object raises an error instead of popping up an exception (as of Kernel-jcg.279).' id '25bbef92-3bec-4686-8efe-7f36dc99ff4f' date '21 October 2009' time '1:13:35 am' author 'jcg' ancestors ((name 'Compiler-nice.91' message 'forgot one #asArray sort' id '556fa6ce-bedb-40be-a35e-b73241447237' date '21 October 2009' time '12:29:40 pm' author 'nice' ancestors ((name 'Compiler-nice.90' message 'Use #keys rather than #fasterKeysNote that pattern (x keys asArray sort) could as well be written (x keys sort) now that keys returns an Array...This #asArray is here solely for cross-dialect/fork compatibility.' id '9d0fa200-caaa-42f6-bd09-aa6f8c535fcb' date '21 October 2009' time '12:19:50 pm' author 'nice' ancestors ((name 'Compiler-nice.89' message 'use keys asSet where due' id '97fdcb43-1596-49f7-bf95-1c048cafd2b7' date '20 October 2009' time '9:27:04 am' author 'nice' ancestors ((name 'Compiler-nice.88' message 'use fasterKeys' id '096cf390-ac02-d44d-bb77-f785bce5f9cc' date '19 October 2009' time '11:09:39 am' author 'nice' ancestors ((name 'Compiler-jcg.87' message 'Revert to lazy-initialization of method properties, which is used by the externally-maintained Prolog package (which loads cleanly into 3.10.2, but not trunk).Part 2 of 2... need to load -jcg.85 first (this is taken care of by the Monticello Configuration update-jcg.32.mcm)' id '71bf4e8d-f9f3-4371-a218-ad31a985cfd8' date '30 September 2009' time '11:21:53 am' author 'jcg' ancestors ((name 'Compiler-ul.86' message '- new #scanFor: for LiteralDictionary too' id 'aed23852-da1c-3b4f-88e8-33c860f282dd' date '30 September 2009' time '3:03:27 am' author 'ul' ancestors ((name 'Compiler-jcg.85' message 'Revert to lazy-initialization of method properties, which is used by the externally-maintained Prolog package (which loads cleanly into 3.10.2, but not trunk).Part 1 of 2... need to first re-add the #properties method to Parser before changing methods to send it.' id '21a5f88d-4107-48c3-b41c-d5ea735319a7' date '30 September 2009' time '1:14:16 am' author 'jcg' ancestors ((name 'Compiler-tfel.84' message 'MethodContext>>who is deprecated, and here we only need the methodClass anyway, so replace that' id '8e446c0f-0888-4958-9bb0-6b570361c108' date '16 September 2009' time '12:55:08 pm' author 'tfel' ancestors ((name 'Compiler-nice.83' message 'Add the test for bug http://bugs.squeak.org/view.php?id=6797self deny: (0.5s1 scale = 0.50s2 scale).' id '421fd985-67d3-4991-9bcf-e7abae734f34' date '12 September 2009' time '9:25:13 am' author 'nice' ancestors ((name 'Compiler-nice.82' message 'Part of fix for http://bugs.squeak.org/view.php?id=6797Use #literalEqual: for testing equality of two literals.' id '4c77174b-dd90-4c6d-943e-fc90a02f6677' date '12 September 2009' time '9:07:16 am' author 'nice' ancestors ((name 'Compiler-ar.81' message 'Another required script for loading the latest batch of closure fixes.' id '1373ef7e-27c9-964c-bd38-7ce0168b4daf' date '5 September 2009' time '10:24:42 am' author 'ar' ancestors ((name 'Compiler-ar.80' message 'Add an initialize method working around the limitations of MCDs and scripts.' id '82001507-c038-784a-a4e2-0c969b53800f' date '5 September 2009' time '10:06:25 am' author 'ar' ancestors ((name 'Compiler-eem.79' message 'Fourth package of eight in closure compiler fixes 9/5/2009.Second stage of the closure compiler fixes for- miscompilation of optimized blocks- bugs in statement highlighting in the debugger- storing the selector as the penultimate literal of a method  directly unless it has properties, in which case it has an  AdditionalMethodState.  Saves significant space.Throws the switch to the new closure analysis in BlockNode>>analyseArguments:temporaries:rootNode: using in place of analyseTempsWithin:rootNode:assignmentPools: analyseTempsWithin:rootNode:.This requires	Exceptions-eem.12	Kernel-eem.242	Compiler-eem.78' id 'f52d0730-d744-40d2-bdd1-f7412fc1b8f1' date '5 September 2009' time '4:42:29 am' author 'eem' ancestors ((name 'Compiler-eem.78' message 'Third package of eight in closure compiler fixes 9/5/2009.Stage one of the closure compiler fixes for- miscompilation of optimized blocks- bugs in statement highlighting in the debugger- storing the selector as the penultimate literal of a method  directly unless it has properties, in which case it has an  AdditionalMethodState.  Saves significant space.Requires	Exceptions-eem.12	Kernel-eem.242' id 'da3b583f-896a-416c-9c4f-3687f66b8530' date '5 September 2009' time '4:26:32 am' author 'eem' ancestors ((name 'Compiler-mha.77' message 'removed obsolete method Parser >> #pragmaLiteral (replaced by #pragmaLiteral: in Compiler-mha.76)' id '111b37ed-654c-45a3-a38a-46022d8618e0' date '3 September 2009' time '2:49:48 am' author 'mha' ancestors ((name 'Compiler-mha.76' message 'inserted an extension originally contributed by Eliot Miranda (to make Alien support possible in the trunk)' id '1218194f-4a88-44df-9d79-e80638a53aa7' date '1 September 2009' time '4:35:49 am' author 'mha' ancestors ((name 'Compiler-tfel.75' message 'MethodNode>>generateWith:using:Nuked the method according to Andreas'' request on the mailinglist' id 'c0548007-a567-49ac-81ed-f0df3a098e65' date '1 September 2009' time '5:13:15 am' author 'tfel' ancestors ((name 'Compiler-tfel.74' message 'MethodNode>>generateWith:using: was missing a variable declaration for ''literals'', I just put it in' id '4633c11d-cc0d-4149-9f3d-018d5f0f24f7' date '31 August 2009' time '7:48:14 am' author 'tfel' ancestors ((name 'Compiler-cwp.73' message 'The compiler now uses notifications to signal that a correctable error has been found in the method source, rather than interacting directly with the user. ' id '0fc4552f-d0c6-481a-8fa0-2bea842240b2' date '25 August 2009' time '8:45:22 am' author 'cwp' ancestors ((name 'Compiler-rss.72' message 'Collections-rss.118' id '8e73baaa-38e9-4fa1-9f55-025566fee18e' date '23 August 2009' time '1:10:39 am' author 'rss' ancestors ((name 'Compiler-ar.71' message 'Post-closure cleanup and underscore removal.' id '87047498-b171-d94a-9223-a3d840027861' date '18 July 2009' time '7:51 am' author 'ar' ancestors ((name 'Compiler-ar.70' message 'Compile using Closures!' id 'fd8c37c0-8ed5-f04f-9044-dbdfb2d69cc2' date '15 July 2009' time '10:54:31 am' author 'ar' ancestors ((name 'Compiler-ar.69' message 'Closure compiler, main part.' id '9812695d-7f35-9a44-b4bc-b27b782bbd8a' date '15 July 2009' time '10:34:46 am' author 'ar' ancestors ((name 'Compiler-ar.68' message 'Prerequiste changes for Closure installation.' id 'eb94f3b8-a450-2545-ad1c-69b18d92467a' date '15 July 2009' time '10:10:41 am' author 'ar' ancestors ((name 'Compiler-edc.62' message 'To follow this seehttp://bugs.squeak.org/view.php?id= 6704' id '03774d82-5794-410f-91d7-5c84aa2a790f' date '4 November 2007' time '8:16:55 am' author 'edc' ancestors ((name 'Compiler-edc.60' message 'To follow this seehttp://bugs.squeak.org/view.php?id= 5935' id '3ca66f20-2dee-40cf-82b8-4b1c96ea8592' date '8 May 2007' time '6:23:19 pm' author 'edc' ancestors ((name 'Compiler-edc.59' message 'To follow this seehttp://bugs.squeak.org/view.php?id= 5936' id '2c2a0358-316a-4005-a3ef-0e41efb00454' date '8 May 2007' time '4:54:25 pm' author 'edc' ancestors ((name 'Compiler-edc.58' message 'To follow this seehttp://bugs.squeak.org/view.php?id= 1014' id '4a66d4f1-7e23-4491-994a-7fb65af63783' date '13 April 2007' time '11:54:29 am' author 'edc' ancestors ((name 'Compiler-sd.57' message 'http://bugs.impara.de/view.php?id=3331Eval problem fixed by scott' id '1e313902-5e8c-11db-82f2-001124e3ab0e' date '18 October 2006' time '11:36:23 am' author 'sd' ancestors ((name 'Compiler-lr.56' message '- merged code to fix unknown pragma selectors- don''t allow class names in pragmas (to be consistent)- use pragmas to define primitive-pragmas' id 'f429f722-c39f-4acf-9d8c-c8a38320eaa8' date '5 October 2006' time '10:14:04 am' author 'lr' ancestors ((name 'Compiler-lr.55' message '- allow binary selectors in pragmas' id 'c1d1a532-2210-4ee9-b66a-50c3eeefd6ce' date '21 August 2006' time '9:24:02 am' author 'lr' ancestors ((name 'Compiler-lr.54' message '- offer to correct pragma message selectors if they are unknown to the system' id '9ea70c0b-1ebc-4d35-b9f2-bfa1e5e57f8d' date '19 August 2006' time '5:09:02 pm' author 'lr' ancestors ((name 'Compiler-md.53' message 'fix to make MethodFinder work with both now and old AST' id '138e48f1-2d8f-42e6-9e14-a2cc1c8c34f4' date '2 August 2006' time '5:50:07 pm' author 'md' ancestors ((name 'Compiler-md.51' message 'removed broken tests' id 'be84aa2e-c1fc-4783-886b-42ba38142007' date '14 July 2006' time '4:39:56 pm' author 'md' ancestors ((name 'Compiler-lr.50' message '- fixed more pragma bugs (throw an error for <1> and <foo bar>)' id '47ef9423-0f74-11db-b64a-000a9573eae2' date '9 July 2006' time '7:56:43 pm' author 'lr' ancestors ((name 'Compiler-lr.49' message '- allow pragmas before and after method temps- properly trigger an error for invalid pragmas' id '25e18bd4-d7c2-451c-9d73-aa93dffe1cc0' date '3 July 2006' time '3:05:53 pm' author 'lr' ancestors ((name 'Compiler-sd.48' message '3515 - Parser fails in #defineClass: becasue Metaclass doest not understand #category' id '6b784ed6-4e6d-430a-8795-469b7eec4306' date '29 April 2006' time '10:25:04 pm' author 'sd' ancestors ((name 'Compiler-md.47' message 'endpc --> endPC' id '34d77546-d469-11da-8f58-000d933a223c' date '25 April 2006' time '4:38:48 pm' author 'md' ancestors ((name 'Compiler-md.46' message 'merge for image' id 'aacda43a-d364-11da-8831-000d933a223c' date '24 April 2006' time '9:33:47 am' author 'md' ancestors ((name 'Compiler-fbs.33' message 'This version converts "== <integer literal>" to "= <integer literal>" in response to Dan Ingalls'' note: http://lists.squeakfoundation.org/pipermail/squeak-dev/2006-February/100600.html' id '298f05e4-d0ed-3b4a-93d6-231e483acdcf' date '14 February 2006' time '5:45:15 pm' author 'fbs' ancestors ((name 'Compiler-md.31' message 'revert patch to Decompiler>>decompileBlock, skip -md.30 for now.' id '86ba0dcd-cafc-4521-a3ae-b2c371bfcb51' date '22 January 2006' time '7:39:26 pm' author 'md' ancestors ((name 'Compiler-md.29' message 'changes from the ClosureCompiler' id '5c2f9485-33db-4a9c-b720-f077ef3f0fb7' date '20 January 2006' time '11:06:45 pm' author 'md' ancestors ((name 'Compiler-md.28' message 'Change Set:		decompileBlock-md	Date:			24 November 2005	Author:			Marcus Denker	A  simplification for BlockContext>>decompileBlock:	The Method got the tempNames by compiling the source of the method. This	is already implemented in methodNode tempNames... thus not needed here.' id 'f9cea385-aef5-488c-97d7-b933a9a2685e' date '19 January 2006' time '8:59:50 am' author 'md' ancestors ((name 'Compiler-md.27' message 'Change Encoder>>allLiterals to not make a PropertyLiteral Instance. Jut put in nil' id '16e59d13-0829-4a46-8086-fbd11749ecd2' date '18 January 2006' time '9:37:13 am' author 'md' ancestors ((name 'Compiler-sd.26' message 'made diry by the annotation cs we put in the stream6713' id 'b67aab01-962a-404c-9a51-2bcee96f81d8' date '15 January 2006' time '7:17:11 pm' author 'sd' ancestors ((name 'Compiler-stephaneducasse.25' message '001 Compiler AnnotChanges without recompileAll.' id '2ffbd075-408b-4dc0-ab01-ed9cea82a701' date '15 January 2006' time '6:11:20 pm' author 'stephaneducasse' ancestors ((name 'Compiler-sd.24' message 'merge adrian and cees fixes.	al.23 and CdG.22	- 2271' id '99b6d042-89b5-49ea-9a72-94bcf887fec5' date '13 January 2006' time '11:20:16 pm' author 'sd' ancestors ((name 'Compiler-CdG.22' message 'Harvested Mantis #2271' id '8c5ab31e-c54c-4f46-badd-ffde154db66b' date '8 December 2005' time '7:34:53 pm' author 'CdG' ancestors ((name 'Compiler-stephaneducasse.21' message 'This version of the package include nows this cs"Change Set:		fixesDate:			5 November 2005Author:			Stephane DucasseSome fixes to get back some cleans of marcus on the compiler and also the possibilities to load MC code.The definitions of the two interactive methods is clearly a temporary solution: since they make compiler depends on tools via the faked exception SyntaxError (which is a subclass of StringHolder)"This package may not load with other version than 6702 due to load order problems.' id 'f2b94ea2-95bd-47dd-b263-c958e44686d0' date '5 November 2005' time '7:55:47 pm' author 'stephaneducasse' ancestors ((name 'Compiler-stephaneducasse.20' message 'include the changes that where giving a problem when loading PlusTools. So the package may not load alone.' id '89158ed0-0c6e-4353-a01c-3b4a226e2b8d' date '5 November 2005' time '3:19:18 pm' author 'stephaneducasse' ancestors ((name 'Compiler-CdG.19' message 'removed a bit more...' id '9ec82252-9f23-3d45-8d05-b3b58e25eb74' date '31 October 2005' time '9:37:12 pm' author 'CdG' ancestors ((name 'Compiler-CdG.18' message 'remove some dangerous changesets from the plustools package' id '9c9a545f-6137-394c-b540-99e97258c2ce' date '31 October 2005' time '9:27:15 pm' author 'CdG' ancestors ((name 'Compiler-CdG.16' message 'Integrated ToolBuilder-UI-Refactor-FillInTheBlank-1.cs from Mantis #1828' id '3765f4fb-a961-0448-8900-177c17bfdd30' date '17 October 2005' time '9:05:05 pm' author 'CdG' ancestors ((name 'Compiler-CdG.15' message 'Integrated ToolBuilder-UI-Refactor-PopUpMenu-1.cs from Mantis #1828 ' id '2671aea2-2b8f-5c4c-af64-836618ef026f' date '17 October 2005' time '7:58:39 pm' author 'CdG' ancestors ((name 'Compiler-sd.14' message 'merge al12 and md13Bugfix for Mantis report:0001820: Parser>>parseArgsAndTemps: brokenBug was introduced in 3.8 by the enhancement of additionally displaying the method selector in which a temp is shadowed.To reproduce, evaluate: "Compiler parserClass new parseArgsAndTemps: ''foo | tmp |'' notifying: nil"Additionally removes a duplicated method.' id 'a7a74a0f-7464-450d-b6f2-e116d5f660ee' date '16 October 2005' time '5:26:54 pm' author 'sd' ancestors ((name 'Compiler-md.13' message 'small refactoring in LiteralDict scanFor:' id '21a994e1-8fcc-415e-a3d4-3e188e627b98' date '7 October 2005' time '4:12:09 pm' author 'md' ancestors ((name 'Compiler-stephaneducasse.12' message 'morphicsplitters.1.st' id '2ac30908-9790-4e5a-b3f1-0cc97884e3fa' date '10 September 2005' time '3:14:25 pm' author 'stephaneducasse' ancestors ((name 'Compiler-md.11' message 'Change Set:		RemoveUnusedTempNameCache-bvsDate:			6 January 2005Author:			Benjamin SchroederCompiledMethod keeps a cache of temporary names for a single CompiledMethod instance. The cache is set after compilation and during certain debugger operations. However, it is never read.Keeping the cache creates an extra reference to the most recently compiled method. This can be a problem in certain obscure situations, such as including the method in an image segment.This changeset removes the cache.' id 'bc578395-e241-4ccc-bc44-c91bf5167849' date '5 September 2005' time '4:11:59 pm' author 'md' ancestors ((name 'Compiler-md.10' message '- removed dialect support from DialectStream- renamed DealectStream to ColoredCodeStream' id 'a6be1559-0f43-4056-9e37-10db4acc0a6f' date '15 August 2005' time '11:07:15 am' author 'md' ancestors ((name 'Compiler-md.9' message 'remove support for #SQ00 alternate Syntax' id '5267ce2c-cef8-46ba-a697-dba91b5fbcd5' date '14 August 2005' time '6:03:34 pm' author 'md' ancestors ((name 'Compiler-md.8' message 'make Decompiler>>decompileBlock use BlockCtx>>endpc' id '5db8e79c-7e76-4643-9240-dcc3ede75e5b' date '9 August 2005' time '8:08:15 pm' author 'md' ancestors ((name 'Compiler-md.7' message 'Change Set:		6603CleaningUtilitiesDate:			30 March 2005Author:			stephane ducasseMove some utilities close to the class they use, i.e. Scanner' id '18778297-6ba1-4b56-becc-b6779f5399bc' date '6 August 2005' time '12:01:07 pm' author 'md' ancestors ((name 'Compiler-md.6' message 'add Compiler class>>recompileAll' id 'bf1f1b14-9bcf-4efe-b356-0de3bc4f1566' date '5 August 2005' time '3:25:41 pm' author 'md' ancestors ((name 'Compiler-md.5' message 'Change Set:		New ChangesDate:			5 June 2005Author:			stephane ducasseClean nearly all the tests in 3.9	- use assert where needed	- removed empty setUp/tear	- removed empty categories	- changes testing->tests	- renamed tests	- recategorize as yet unclassified' id '1d79303c-6786-4c10-8ff9-77c28454fc2d' date '4 August 2005' time '5:38:23 pm' author 'md' ancestors ((name 'Compiler-md.4' message 'adds format: textOrStream in: aClass notifying: aRequestor contentsSymbol: aSymboladds format: textOrStream in: aClass notifying: aRequestor decorated: aBoolean(both from RB)' id 'f45e5698-e87e-4362-bd9f-94f2c6b7bc10' date '3 August 2005' time '12:12:26 am' author 'md' ancestors ((name 'Compiler-md.3' message 'Change Set:		defaultClassCategory-hboonDate:			21 November 2004Author:			Yar Hwee BoonSet the default class category to be the same as the current class in the prompt to define new class' id '54e28b3f-1bfa-4720-809c-fa3c78856888' date '2 August 2005' time '9:07:38 pm' author 'md' ancestors ((name 'Compiler-md.2' message 'moved primitiveNode into another category' id 'd6464621-203b-4920-9928-129b9cc3f045' date '29 July 2005' time '4:15:11 pm' author 'md' ancestors ((name 'Compiler-dew.1' message 'Initial version from 3.8 partitioning.' id 'f04abbc9-ebd0-11d9-869f-000d93572e0e' date '3 July 2005' time '10:44:20 am' author 'dew' ancestors () stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'Compiler-al.12' message 'Bugfix for Mantis report:0001820: Parser>>parseArgsAndTemps: brokenBug was introduced in 3.8 by the enhancement of additionally displaying the method selector in which a temp is shadowed.To reproduce, evaluate: "Compiler parserClass new parseArgsAndTemps: ''foo | tmp |'' notifying: nil"Additionally removes a duplicated method.' id 'ece35314-4960-40e3-8058-921ba5bf1e74' date '29 September 2005' time '5:03:03 pm' author 'al' ancestors ((name 'Compiler-al.12' message 'Bugfix for Mantis report:0001820: Parser>>parseArgsAndTemps: brokenBug was introduced in 3.8 by the enhancement of additionally displaying the method selector in which a temp is shadowed.To reproduce, evaluate: "Compiler parserClass new parseArgsAndTemps: ''foo | tmp |'' notifying: nil"' id 'a85e53ec-7b8f-4dca-bcfe-2eb8711302be' date '29 September 2005' time '5:01:16 pm' author 'al' ancestors ((id 'bc578395-e241-4ccc-bc44-c91bf5167849')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'Compiler-al.23' message '- merge' id '0ee9f3c1-d4e6-4d6f-ab09-d81a1f06f832' date '13 January 2006' time '7:15:19 pm' author 'al' ancestors ((name 'Compiler-al.22' message '- changes corresponding to allClasses, allTraits interface' id '5bc0dbae-76a9-4dee-86d2-ebf997cbdec5' date '13 January 2006' time '5:27:37 pm' author 'al' ancestors ((id 'f2b94ea2-95bd-47dd-b263-c958e44686d0')) stepChildren ())(name 'Compiler-sd.22' message 'lukas fix ' id 'ca293b5f-25f6-4461-82cb-afe5e7195018' date '19 December 2005' time '5:03:27 pm' author 'sd' ancestors ((id 'f2b94ea2-95bd-47dd-b263-c958e44686d0')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'Compiler-al.45' message 'Small refactoring of MethodNode>>generate and related methods (needed by MethodWrappers)' id 'b21f0d79-e6ee-4fa0-ae24-49e647baebee' date '21 April 2006' time '5:32:04 pm' author 'al' ancestors ((name 'Compiler-DF.5' message 'Rename of #generateFrom:using: to #generateWith:using:' id 'aeda5e24-13ec-894f-8d21-887729dd6761' date '19 April 2006' time '12:03:34 am' author 'DF' ancestors ((name 'Compiler-DF.45' message 'empty log message' id '9806bf03-5d59-6f4d-96d4-fd3412e2d2b3' date '17 April 2006' time '2:43:58 pm' author 'DF' ancestors ((name 'Compiler-md.44' message '- pretty print use := by default' id '8dc398e2-af7f-11da-a7a4-000d933a223c' date '9 March 2006' time '4:15:33 pm' author 'md' ancestors ((name 'Compiler-md.43' message '- remove Preference #ansiAssignmentOperatorWhenPrettyPrinting- set selector when evaluating a #Doit. Fixes MessageTally tallySends:- cleanups in Parser: remove old Properties code	- cleanups in Encoder: use #binding, not #associationFor:. 	' id '577df430-aaca-11da-886d-000d933a223c' date '3 March 2006' time '4:28:18 pm' author 'md' ancestors ((name 'Compiler-md.42' message '- nLits check moved into compiledMethod- moved setting of encoder regquestor from Behavior  to Compiler- simplified compile:in:notifying:ifFail:- recategorisations ' id 'b80ae88b-a845-11da-a8bb-000d933a223c' date '28 February 2006' time '11:33:55 am' author 'md' ancestors ((name 'Compiler-md.41' message '- environment removal' id 'a873d9ed-88bd-4e4e-8564-c90ea6f52180' date '24 February 2006' time '11:11:48 pm' author 'md' ancestors ((name 'Compiler-md.40' message '- BlockContext>>decompileText- refactoring to not reference Decompiler class' id '19a8ad92-a180-4312-a616-aaa02ade032c' date '22 February 2006' time '10:10:41 pm' author 'md' ancestors ((name 'Compiler-md.39' message '- add BlockNode>>#decompileString- remove Compiler class>>#old- add some methods from the NewCompiler- remove #asColorizedSmalltalk80Text- cleanups' id 'fb93c298-fa35-4dd7-8b00-ac4605318e4b' date '21 February 2006' time '9:27:29 am' author 'md' ancestors ((name 'Compiler-md.38' message '- delete Compiler>>#cacheDoItNode- remove ivar cacheDoItNode' id '424a3d59-a345-4991-b61a-e7abfd4b6bb0' date '19 February 2006' time '12:11:34 am' author 'md' ancestors ((name 'Compiler-md.37' message 'empty log message' id '8e065014-9488-40c7-a345-96d7ab4da73c' date '18 February 2006' time '1:35:35 pm' author 'md' ancestors ((name 'Compiler-md.36' message 'Put back in the simplified Decompiler>>#decompileBlock:' id '2c6697b2-a7b9-46d4-b6ac-1a35e684d9f1' date '16 February 2006' time '4:45:58 pm' author 'md' ancestors ((name 'Compiler-md.35' message 'cleaned up unused old propertu code in parser' id '80bb6f9f-5655-4f1a-8a87-e3ec2feeaa92' date '16 February 2006' time '2:10:16 pm' author 'md' ancestors ((name 'Compiler-md.34' message 'Changes for Method Properties' id '3eb726fd-b61a-492f-af52-bd4bc81541b2' date '15 February 2006' time '5:33:17 pm' author 'md' ancestors ((name 'Compiler-md.33' message '0002570: [Fix] When Color prety printing it is hard to read the light tan literals against 	 the white background.' id 'ebb04e9c-3f3c-4b65-8087-d0a541074752' date '14 February 2006' time '9:03:18 pm' author 'md' ancestors ((name 'Compiler-md.32' message '- remove MethodNode>>#generateNative- add generate (to call generate: #(0 0 0 0).- fix senders to use it' id '3b542384-712f-415e-8e6a-f6feb7f50629' date '13 February 2006' time '6:08:04 pm' author 'md' ancestors ((id '86ba0dcd-cafc-4521-a3ae-b2c371bfcb51')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(id '8dc398e2-af7f-11da-a7a4-000d933a223c')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'Compiler-nice.139' message 'nil out locals in a block if readBeforeWritten- Use noteOptimizedIn: instead of noteOptimized- Let accept: return the result of message sent to visitor' id 'a131f445-c2f7-dd47-85fd-b0d38ab18874' date '7 April 2010' time '3:06:44.988 am' author 'nice' ancestors ((id '15955722-1326-a940-9805-280830c59af6')) stepChildren ())) stepChildren ())) stepChildren ())(name 'Compiler-eem.140' message 'Fix code gen infinite recursion and missing error check for compiling assignments to read-only global variables.' id '1811aad2-ae46-40ed-baa6-f572c9d2cd49' date '20 May 2010' time '9:19:38.873 am' author 'eem' ancestors ((id 'c15d727c-a890-224c-b427-5d6eea33efed')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'Compiler-fbs.183' message 'Fix for 7588: Decompiler>>interpretNextInstructionFor: bitrot:If you change the first statement in the above-mentioned method to  false ifTrue: [^ super interpretNextInstructionFor: client].you will print out debug information. Or you would if you didn''t get an exception printing out the bytecode. "code copyFrom: 4 to: code size" fails because it tries to make a String of size -2. That''s because code at this point is something like ''70'' if you''re currently interpreting bytecode 112.Changing the offending line to "nextPutAll: ''<'', code, ''>'' fixes things.' id '99e9d7d8-0347-5941-8b10-3a187432806e' date '19 December 2010' time '10:28:02.599 pm' author 'fbs' ancestors ((id 'ee785fb8-9a21-9b4a-a451-03f648a97ded')) stepChildren ())(name 'Compiler-nice.186' message 'Add both Compiler and Decompiler support for inlined #repeat.Implementation notes:For compilation, the repeat is implemented with a simple backward jump if ever the receiver is a block.For decompilation, things are a bit more tedious because conditonnal loops (whileTrue/False) must be differentiated from unconditional loops (repeat).The signature of conditional loops is that they all have their backward jump hoping over their conditional jump.If a backward jump does not cross any conditional jump on its way back, then it must be a repeat.The idea is thus to register the program counter of the test instruction before the conditional jump (lastJumpIfPc), and verify if the bacward jump branch after or before this instruction.Things are a bit more complex because there can be a conditional instruction inside the repeat body. That''s why those conditional jumps must be stacked (on lastJumpIfPcStack), and unstacked once decompiled.' id '9bdb53d0-56a1-4d0b-9835-f60a135dd7f6' date '3 February 2011' time '11:26:04.737999999 pm' author 'nice' ancestors ((id 'ba12fb9c-6c57-429b-b415-1188e1faba8b')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'Compiler-cwp.235' message 'Remove support for per-class settings of #allowUnderscoreSelectors.' id '3846e031-0fd2-4d1e-9745-c53bb2076217' date '13 August 2012' time '3:51:45.14 pm' author 'cwp' ancestors ((id '8ab216d0-f621-4dc4-b50a-3b7697817cb2')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'Compiler-nice.272' message 'Fix for this scenario:1) a SyntaxError occurs while loading a method with a <primitive:> pragma  For example, the method uses underscore asssignments, but you did not enable the Preferences allowing historical code...2) You either enable the underscore assignment Preferences, or replace the underscores with := in SyntaxError window, then accept3) Bing: you get another complaint <primitive: 103ambiguous primitive->>This is because the properties were incorrectly accumulated thru each ReparseAfterSourceEditing...' id 'c8f1967f-bcf0-4808-af82-b3db07857493' date '23 September 2013' time '10:54:23.436 pm' author 'nice' ancestors ((name 'Compiler-nice.271' message 'Remove messages trying to pass a category (protocol) to a Compiler/CompilationCue.A Compiler does compile but does not classify, not its job.Remove now unused category from CompilationCue and SyntaxErrorNotification.Remove messages trying to pass a context which are always used with nil.Remove notify: and notify:at: from Compiler.No one is going to notify a Compiler, because Compiler is just a facade.Notifications happens in Encoder and Parser.Remove requestor: from Encoder, no send.Do not deprecate, just remove. Deprecations will be introduced on demand for easing port of 3rd party packages.But there is too much dust, and the clean up is far from finished yet.' id '3d31957d-6424-4e69-b25e-7c2ea9509a81' date '20 September 2013' time '10:39:12.511 pm' author 'nice' ancestors ((id '96ead68a-0990-4917-9e75-4a9d0764ec7c')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'Compiler-Richo.4' message '* Fixed parsing of external function declarations in order to make FFI work correctly.' id 'ad749a67-8101-7245-b150-7fb8b9b43218' date '31 December 2010' time '12:07:30 am' author 'Richo' ancestors ((name 'Compiler-kfr.3' message 'Fixes jira bug SQ-710Removal of variable used in a script caused a walkback' id 'd735b799-4fd3-f74b-baec-abca8a9c31bf' date '8 June 2010' time '10:48:49 pm' author 'kfr' ancestors ((name 'Compiler-bf.2' message '- fix compiling scripts (reported by Ricardo, fixed by Eliot).' id '227341c1-4afa-4325-92ca-8798b09624c7' date '3 May 2010' time '9:39:56 am' author 'bf' ancestors ((name 'Compiler-bf.1' message '* initial etoys 4.1 snapshot' id '525dec0f-887b-4005-b73d-d3d184f31f6d' date '29 April 2010' time '2:17:22 pm' author 'bf' ancestors () stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'Compiler-jr.329' message 'add method variants with environment parameters' id '6053da84-5a5b-b043-8dcc-019bc75762df' date '28 February 2017' time '12:19:04.434081 am' author 'jr' ancestors ((id '165e1dcd-51cd-4ce9-8806-92457585a3d1')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'Compiler-eem.354' message 'Provide a proper comment for BlockNode and eliminate an unused variable and an unused method; this in prelude to implementing full blocks.Eliminate obsolete binding machinery (literalScannedAs:notifying:).  The current compiler deals with Undeclared in a more direct way earlier in compilation.Nuke the unnecessary identical override of generateMethodOfClass:trailer:from: in EncoderForSistaV1. Correct a spelling error.' id '79ec7453-8d66-471d-b7fa-2699146390c8' date '5 May 2017' time '12:11:34.451259 pm' author 'eem' ancestors ((name 'Compiler-eem.353' message 'Fix the order-of-evaluation bug with inlined to:[by:]do: loops.Fix the decompiler to correctly decompile the new ordering.Use isFoo methods instead of isMemberOf: in the new decompiler code.Nuke some obsolete decompilation methods.Make the postscript re3compile all senders of to:do: or to:by:do:.' id '76c9fea6-d855-42cd-aeb5-9cb0753f6f9d' date '25 April 2017' time '6:43:55.473745 pm' author 'eem' ancestors ((name 'Compiler-ul.352' message '- rewrote senders of #clone to use #shallowCopy' id '1ac9255e-aa00-4fca-8983-810cd0f1f3ba' date '24 April 2017' time '1:00:45.337997 pm' author 'ul' ancestors ((name 'Compiler-eem.351' message 'Add missing directedSuperSend: support.' id 'a6fc0090-227a-4e9c-b85d-a6c05c20707b' date '13 April 2017' time '1:51:29.304066 pm' author 'eem' ancestors ((name 'Compiler-eem.350' message 'Have decompileMethod: access the method from its argument, aBlock, so that FullBlockClosures have a chance of decompiling correctly.' id '2ea4f497-05f7-4dbd-b6af-31821d794e22' date '10 April 2017' time '11:54:17.562394 am' author 'eem' ancestors ((name 'Compiler-eem.349' message 'Fix the limitation on num literals in the SistaV1 send bytecodes.  Makew a probably obsolete method multiple-bytecode set aware.' id 'd41ed80d-cd74-4d9d-ac42-689529b93592' date '6 April 2017' time '3:28:27.168241 pm' author 'eem' ancestors ((name 'Compiler-eem.348' message 'Fix block temp scanning with multiple bytecode sets.  Fix a comment typo.' id '3b6b4b75-ce1d-4b07-baf7-d880050399b7' date '6 April 2017' time '2:19:56.941332 pm' author 'eem' ancestors ((name 'Compiler-eem.347' message 'Provide is(Non)SyntheticStoreAt:in:for: for SistaV1.Fix selectorToSendOrItselfFor:in:at: so that it is not follwed if invoked at a raw bytecode that is preceeded by an extension.' id 'd778b11b-16be-4455-8955-cac9921e64a0' date '6 April 2017' time '12:08:22.719112 pm' author 'eem' ancestors ((name 'Compiler-eem.346' message 'Implement genPushNClosureTemps: in BytecodeEncoder so the implementation is shared between V3 and SistaV1.' id '164463e6-4a88-4bbd-a4b6-0b5174a2e181' date '6 April 2017' time '10:59:34.976787 am' author 'eem' ancestors ((name 'Compiler-eem.345' message 'Update EncoderForSistaV1.  revise the comment with the latest inline primitive spec and with better description and ordering of the Smalltalk and Sista parts of the bytecode set.Fix encoding bugs for genPushConsArray:, genPushSpecialLiteral:, genReturnTopToCaller, genSend:numArgs: & genStoreTemp:.Cirrect some limit warnings amd several comments.' id 'efc37a11-9654-451e-ab54-722190fbd9fa' date '6 April 2017' time '10:40:46.118475 am' author 'eem' ancestors ((name 'Compiler-eem.344' message 'Add EncoderForSistaV1.Add decompiler & temp counter support for blockReturnConstant:' id 'a56effdc-4701-4ebc-bd0f-a8079fec1047' date '5 April 2017' time '11:17:41.76796 pm' author 'eem' ancestors ((name 'Compiler-eem.343' message 'Have generate:using: use the new generation method that lives in BytecodeEncoder.Recategorize all "code generation (closures)" methods as "closure analysis".' id 'b1396086-dbcc-4b10-b0bd-87a0c5dfc58b' date '5 April 2017' time '11:14:40.70746 pm' author 'eem' ancestors ((name 'Compiler-eem.342' message 'Remove most, if not all, of the old pre-closure-bytecode and blue-book block support from the compiler.Recategorize code generation (size & emit methods) under "code generation", leaving closure analysis in "code generation (closures)" (to be changed later).Eliminate the short-form brace node creation code (which has used the cons array bytecode since the use of the closure bytecodes).' id 'afa59f0b-fa51-4de2-82c9-4398447bc85d' date '5 April 2017' time '11:07:52.115372 pm' author 'eem' ancestors ((name 'Compiler-eem.341' message 'Add the refactored encoder-specific method generator.  This one moves generation from MethodNode to BytecodeEncoder and subclasses, and hence allows easier bytecode set selection, or at least far more sends to self than to encoder.  Add the MethodNode>>primitive accessor it requires.' id 'cffd92b7-b368-49ea-9ddd-2f01e7552079' date '5 April 2017' time '8:21:57.818217 pm' author 'eem' ancestors ((id '76902ca3-f64d-427a-af3d-466a103a3ce3')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'Compiler-nice.354' message 'Don''t decompile obsolete compiled forms for braces {} (braceWith: & friends) nor blocks [] (closureCopy:copiedValues:)' id '59611875-6e84-499b-88af-e118535a2c14' date '26 April 2017' time '11:47:32.330583 pm' author 'nice' ancestors ((id '76c9fea6-d855-42cd-aeb5-9cb0753f6f9d')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'Compiler-ul.401' message '- fixed typo' id '395adc27-f48e-484c-9097-5197ea3a0155' date '16 March 2019' time '11:56:29.899053 pm' author 'ul' ancestors ((id '0454c383-0390-4733-ad3e-ed056ace7715')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())(name 'Compiler-ct.407' message 'Fix SyntaxErrorNotification coverage (see example in http://forum.world.st/The-Inbox-Compiler-ct-404-mcz-tp5100414p5100430.html)' id '63066cad-d45d-6a42-a0fa-c39e18b44ae6' date '30 June 2019' time '2:10:51.53343 pm' author 'ct' ancestors ((name 'Compiler-ct.406' message 'Fix SyntaxErrorNotification>>#messageText implementation (Error>>#messageText is never nil)' id 'd6e9e7fc-f54b-044d-bc18-790786074075' date '29 June 2019' time '11:38:56.93143 pm' author 'ct' ancestors ((name 'Compiler-ct.405' message 'Add resumption logic to SyntaxErrorNotification' id '500db9b5-d4f6-c24e-8e91-fea4521def76' date '29 June 2019' time '11:38:21.90343 pm' author 'ct' ancestors ((name 'Compiler-ct.404' message 'Fix a defect in Parser>>#parseCue:noPattern:ifFail:Full failure case description:Run the following statement:	Compiler evaluate: ''''''''''''''''In the appearing error window, enter any valid smalltalk expression and save it. Before loading this commit, it will give you a NonBooleanError as doItFlag was set too late (and so was not passed to SyntaxErrorNotification).' id '19e019f5-3ff6-0143-926d-e29c155cc4be' date '17 June 2019' time '10:51:02.869037 pm' author 'ct' ancestors ((id 'a0f07dce-0a58-422e-af37-32d5a3bd6546')) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())) stepChildren ())